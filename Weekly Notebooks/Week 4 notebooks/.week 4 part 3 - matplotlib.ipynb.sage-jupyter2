{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-fc8b7505-7c72-4eca-afc4-ba84287a3bdc.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"26af92","input":"plt.hist(rolls, bins=[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5])","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3626a5","input":"","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4bc2cf","input":"def f(a = 10, b = 20): # 10 is the default value for a, 20 is the default value for b\n    return 2 * a + b","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"53c6db","input":"f(b = 100)","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"75e8dd","input":"faces = [1, 2, 3, 4, 5, 6]\nrolls = np.random.choice(faces, 20) # 20 uniform random choices from the list of faces\nprint(rolls)\nplt.hist(rolls)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"765e69","input":"plt.hist(rolls, bins=[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5], density=True)\nplt.plot([1, 6.5],[0, 0.35])","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9b44ce","input":"","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b6b57a","input":"plt.hist(rolls, bins=[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5], density=True)\nplt.title(\"Density histogram for 20 random dice rolls\")\nplt.xlabel(\"Face\")\nplt.ylabel(\"Density\")","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bf2ff2","input":"","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f7f76c","input":"plt.scatter([1,2],[3,4])","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"0ec893","input":"%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.plot([0, 1, 2], [1, 2, 1])","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f7c17f5dd30>]"},"exec_count":1,"output_type":"execute_result"},"1":{"data":{"image/png":"5f53682b1589102353be865cbe79f3dfbdbd8777","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":1,"metadata":{"image/png":{"height":248,"width":372},"needs_background":"light"},"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"201a1e","input":"import numpy as np\nimport math\nxs = np.linspace(0, 2 * math.pi, 100) # the list of x-coordinates\nys = [math.sin(x) for x in xs] # the list of y-coordinates\nplt.plot(xs, ys)","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f7c15ece5e0>]"},"exec_count":2,"output_type":"execute_result"},"1":{"data":{"image/png":"7fe3834729aedbe1683f9dad61dddcf96c970f07","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":2,"metadata":{"image/png":{"height":248,"width":386},"needs_background":"light"},"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"930799","input":"xs = np.linspace(0, 2 * math.pi, 100)\nys = [math.sin(x) for x in xs]\nzs = [math.cos(x) for x in xs]\nplt.plot(xs, ys)\nplt.plot(xs, zs)","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f7c15e30d30>]"},"exec_count":3,"output_type":"execute_result"},"1":{"data":{"image/png":"dc4cf1ecee1dadaccfbbf6b89c1a0e2699bf2657","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":3,"metadata":{"image/png":{"height":248,"width":386},"needs_background":"light"},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9c3687","input":"xs = np.linspace(0, 2 * math.pi, 30)\nys = [math.sin(x) for x in xs]\nzs = [math.cos(x) for x in xs]\nplt.plot(xs, ys, 'r+', label=\"sin\") # use red plus signs for each point\nplt.plot(xs, zs, 'g--', label=\"cos\") # use a dotted green line\nplt.title(\"Plot of y=sin(x) and y=cos(x)\")\nplt.xlabel(\"x-axis label\")\nplt.ylabel(\"y-axis label\")\nplt.legend()\nplt.grid()","output":{"0":{"data":{"image/png":"0736ba04f5e9b580a644a6563d2af37001c5d25c","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":4,"metadata":{"image/png":{"height":277,"width":400},"needs_background":"light"},"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"14d56a","input":"# Week 4 part 3 - [Matplotlib](https://matplotlib.org)\n\nMatplotlib is a really flexible Python module for creating plots, charts, graphs, and animations. We'll look at some of the basic plotting commands in `matplotlib.pyplot`.  We import this with the `import ... as ...` syntax to cut down on typing.\n\n**Important:** you must include the magic command `%matplotlib inline` to make matplotlib work correctly in a Jupyter notebook. You only need to do this once per notebook.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"1eb089","input":"Now generate an array or list `xs` of 1000 observations from a standard normal random variable (check the `numpy.random` section above for how to do this) and another array or list `ys` of 1000 observations from a standard normal random variable, and make a scatter plot using these x and y coordinates.  Try to predict what shape you will get.","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"2e0cf0","input":"## Unassessed exercises\n\n### Exercise 1 - plot some graphs\n\nPlot the graph of $y = \\cos(x)$ between $0$ and $\\pi$ using 500 equally spaced x-coordinates.\n\nThen plot $y=\\cos(4x)$ on the same axes.\n\nIf you didn't run the cell earlier that contained `%matplotlib inline`, either go and do it or add `%matplotlib inline` to the top of the next code cell, otherwise your plots won't show up.","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"3e444e","input":"so that the bars have their centre above the numbers 1, 2, 3, 4, 5, 6.\n\n**Why isn't `plt.hist(rolls, bins = [1, 2, 3, 4, 5, 6])` a good idea for our data?**  (HINT: count the bars.)\n\nOne final useful argument for `plt.hist` is `density = True`. This scales the height of the bars so that the total bar area is 1.\n\nYou can also use the `title`, `xlabel`, and `ylabel` methods just as we did before to set the title of the histogram and to label the axes.","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"42f388","input":"## Functions with optional named arguments\n\nThe function `plt.plot` is behaving in a way you haven't yet seen in this course.  We called it initially with `plt.plot(xs, ys)`, but later with `plt.plot(xs, ys, 'r+', label=\"sin\")`.  How can the same function accept different numbers of arguments, and what is `label=` for?\n\nThe answer is that `plt.plot` has many different arguments, but they have default values which get used if you don't specify alternatives.  You can do this in your own code as follows:","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"441c7d","input":"The most basic `matplotlib` plotting command is `plot`. The simplest form of plot takes two arguments, a list (or a numpy array) `[x0, x1, ...]` of x-coordinates and a list (or numpy array) `[y0, y1, ...]` of y-coordinates.  It draws a straight line from `(x0, y0)` to `(x1, y1)`, a straight line from `(x1, y1)` to `(x2, y2)`, and so on.  In the plot above, the two argumets are `[0, 1, 2]` and `[1, 2, 1]` so the line goes from `(0,1)` to `(1, 2)` to `(2,1)`.\n\nWe can use `plot` to draw graphs of functions.  If we want the graph of $y = f(x)$ between $x=a$ and $x=b$ we need to generate a list `[x0, x1, ..., xN]` of x-values with `x0 = a` and `xN = b` and another list `[f(x0), f(x1), ..., f(xN)]` giving the y-coordinates.  So long as we choose `N` large enough (and so long as $f$ is nice enough) this should look like the graph of $y=f(x)$.\n\nLet's plot $y= \\sin(x)$ for $0 \\leq x \\leq 2 \\pi$.  There are lots of ways to produce a list of x-coordinates, but the easiest is to use numpy's `linspace(a, b, N)` command which returns an array of shape `(N,)` consisting of `N` equally spaced points starting at `a` and ending at `b`.  To get the y-coordinates, it's simplest to use a list comprehension:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"6ccc50","input":"You can control how big the dots are by setting an optional parameter `s`, e.g. `plt.scatter(xs, ys, s=0.5)` will make the dots fairly small.\n\n**Use `plt.scatter` to plot the points with coordinates $(\\sin(n), \\sin(2n+1))$ for $n=0, 1, 2, \\ldots, 1000$**. What shape do you expect to get?\n\n(SUGGESTION: generate a list of all the x-coordinates, then a list of all y-coordinates and then call `plt.scatter`. If instead you find the first point, then call `plt.scatter` to plot it, then find the next point, then call `plt.scatter` again, your code will a very long time to work.  Only call `plt.scatter` once, after you have generated all the points you want it to plot).","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"899da5","input":"You can see that 100 equally spaced points is enough to make a fairly smooth-looking graph at this scale.\n\nIf we want another curve on the same axes, we can just add another `plot` command.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"ca9c18","input":"If you want to draw different types of chart on the same axis, you can do that.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"d291fc","input":"`plot` has hundreds of different options, which you can read about in [the documentation](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.plot.html). For example, we can add an extra argument `'r+'` which means \"plot the points in red, and draw a + at each point instead of joining the points with lines, or `'g--'` which means to use green dashed lines.\n\nThere are also a pyplot command `title` for giving the plot a title, `grid` for adding grid lines, `xlabel` and `ylabel` for labelling the axes, and `legend` for adding a key.  If you want to use `legend` you have to supply an extra argument `label=\"...\"` to the `plot` commands.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"dc3530","input":"...but the bars may not look exactly how you want.  The most important other argument for `plt.hist` is called `bins`.  If you specify a positive integer for `bins`, e.g. `bins = 10`, then there will be 10 equal-width bars.  (In fact `bins = 10` is the default value, as you can see in the chart above, although some of them have height zero).  If you specify a list for bins, e.g. `bins = [b0, b1, b2,..., bN]` then there will be one bar for each interval $$[b_0, b_1), [b_1, b_2), \\ldots, [b_{N-2}, b_{N-1}), [b_{N-1}, b_N].$$  These intervals are called bins, datapoints not lying in any bin are ignored.\n\nFor our `rolls` data, it would be more appropriate to use bins like this:","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"e973a6","input":"## Histograms\n\nThe other plot type we'll look at is [`plt.hist`](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.hist.html), which makes [histograms](https://en.wikipedia.org/wiki/Histogram) or bar charts.\n\nSay you rolled a dice 20 times and stored the results in a list called `rolls`.  You want to plot a bar chart where the height of the $i$th bar tells you how many times you rolled $i$, so that you can judge whether the dice is fair or not.  We will use the [`np.random.choice`](https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.random.choice.html) function to simulate dice rolls: if you call `np.random.choice(choices, N)` it chooses `N` elements from the list `choices` uniformly at random (with replacement) and returns them in a numpy array.\n\nThe first argument to `plt.hist` should be the list of values you want to plot a histogram of, in this case `rolls`.  You don't actually have to supply any other arguments...","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"f00b7b","input":"### Exercise 2 - scatter plot\n\nThis exercise is about a variation on `plt.plot` called `plt.scatter` which makes scatter plots.\n\n`plt.scatter(xs,ys)` takes a list `xs` of x-values and a list `ys` of y-value and plots a dot at the position with coordinates `(xs[i], ys[i])` for each `i` - you can [read the full documentation at this link](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html).  For example, `plt.scatter([1,2],[3,4])` will make a dot at position (1, 3) and (2, 4)","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"f8bd83","input":"Now\n - `f(1, 2)` returns `2 * 1 + 2`, the usual behaviour you've seen so far. \n - `f(100)` is equivalent to `f(100, 20)` (`b` wasn't specified, so it gets its default value of 20).\n - `f(b = 100)` is equivalent to `f(10, 100)` (`a` wasn't specified, so it gets its default value of 10).\n - `f()` is equivalent to `f(10, 20)` (neither `a` nor `b` was specified, so both get their default values).\n - `f(b = 100, a = 200)` is equivalent to `f(200, 100)`.\n\nTry these out in the next code cell and predict what the output will be.","pos":10,"type":"cell"}
{"id":0,"time":1614969938359,"type":"user"}
{"last_load":1614966206374,"type":"file"}