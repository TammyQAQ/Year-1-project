{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-d973a896-a0d4-4630-bfd0-a4dce669da68.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1611420556387,"exec_count":1,"id":"08fbb5","input":"def volume_of_sphere(r):\n    pi = 3.141592653\n    return (4/3) * pi * r ** 3","kernel":"python3","pos":9,"start":1611420556382,"state":"done","type":"cell"}
{"cell_type":"code","end":1611420563948,"exec_count":2,"id":"b79768","input":"def volume_of_cuboid(length, width, height):\n    return length * width * height","kernel":"python3","pos":11,"start":1611420563941,"state":"done","type":"cell"}
{"cell_type":"code","end":1611420582883,"exec_count":3,"id":"5d3bb5","input":"def depressed_cubic(p, q, x):\n    return x**3 + p*x + q","kernel":"python3","pos":16,"start":1611420582880,"state":"done","type":"cell"}
{"cell_type":"code","end":1611420599172,"exec_count":4,"id":"2cf9e0","input":"def approximate_derivative(f, x, h):\n    return (f(x + h) - f(x)) / h","kernel":"python3","pos":18,"start":1611420599169,"state":"done","type":"cell"}
{"cell_type":"code","end":1611420609206,"exec_count":6,"id":"d59265","input":"def square(x):\n    return x ** 2","kernel":"python3","pos":1,"start":1611420609201,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"08abdd","input":"def surface_area_of_cuboid(length, width, height):\n    first_area = length * width\n    second_area = length * height\n    third_area = height * width\n    return 2 * (first_area + second_area + third_area)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"868846","input":"square(2)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ad4134","input":"a = 1 # Python will ignore this \"comment\"\n2 + 2 # Hopefully the answer is four","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c0254e","input":"def fibonacci(n):\n    \"\"\"\n    Input: a positive whole number n\n    Output: the nth Fibonacci number\n    \"\"\"\n    phi = (1 + 5 ** 0.5) / 2  # phi is the golden ratio\n    #print(\"We're going to calculate Fibonacci number\", n)\n    r = (phi ** n) / (5 ** 0.5)\n    return round(r)  # round(r) is r rounded to a whole number\n\n# You can use print(x, y, z, ...) to print out the values of x, y, z, ...\nprint(fibonacci(1), fibonacci(2), fibonacci(3), fibonacci(4), fibonacci(5), fibonacci(6), fibonacci(7))","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e86135","input":"","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"4ae889","input":"approximate_derivative(square, 1, 0.0001) # should be about 2, as d/dx (x^2) = 2x which is 2 when x=1","kernel":"python3","output":{"0":{"data":{"text/plain":"2.000099999999172"},"exec_count":7}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1e4a2e","input":"# Functions\n\nWe don't want to type out the same formula over and over again.  Python lets us define functions to avoid this.  Here's how to define the function that sends a number $x$ to $x^2$:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"356c5c","input":"Again, if you get a `NameError` it is because you haven't clicked in the cell where the `square` function was defined and pressed shift-enter to run it.\n\nPython functions are similar to functions in maths: they have (zero or more) inputs and (zero or more) outputs.  To define your own function\n\n- first you write `def`,\n- then the name of your function,\n- then the inputs to the function in parentheses,\n- then a colon `:`\n\nEverything that is part of the definition of the function has to be **indented** by four spaces. That means there must be four spaces before each line which is part of the function definition.  In a Jupyter notebook, this happens automatically.\n\nFinally, you specify the output of the function using `return`.\n\nIn the next cell we define a function with three inputs:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"438241","input":"The volume of a sphere of radius $r$ is $\\frac{4}{3} \\pi r^3$.  **Complete the next code cell so that the function `volume_of_sphere` computes the volume of a sphere.**  You'll need to delete the `?????` and replace it with a Python expression that calculates $\\frac{4}{3} \\pi r^3$.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"621552","input":"Notice that lines 2-5 are all indented by 4 spaces, because they are all part of the definition of the function `surface_area_of_cuboid`.\n\nUse the next cell to find the surface area of a cuboid with length 2, width 3, and height 4 using the function defined in the cell above.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"6c6dd8","input":"When you've made this definition (by executing the cell with shift-enter) you can evaluate (or *call*) the function with the input 2 by typing `square(2)`:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"6c971a","input":"## Comments\n\nIf Python sees a `#` symbol, it ignores everything on that line after the `#`.  This allows you to add comments to your code explaining what it does, or to temporarily disable a line of code.\n\nThere's another important way to write comments in Python, called a **docstring**.  Docstrings are just text written inside triple quotes: `\"\"\"triple quotes\"\"\"`.  These are ignored by Python but are often used to tell a human reader what the input and output of a function mean.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"881969","input":"Now write your own function to compute the volumn of a cuboid:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"cd4887","input":"# Unassessed exercises\n\n**Exercise 1.**  Write a function <code>depressed_cubic(p, q, x)</code> whose output is $x^3 + px + q$.  (Yes, \"depressed cubic\" is the real name.)","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"da728a","input":"**Exercise 2.** If $f$ is a differentiable function and $x$ is a number then for small nonzero $h$,\n\n$$f'(x) \\approx \\frac{f(x+h) - f(x)}{h}. $$\n\nWrite a function `approximate_derivative(f, x, h)` which returns this approximation to the derivative of the function `f` at the point `x`.\n\nTest your answer by calling `approximate_derivative(square, 1, 0.0001)`. (At the top of the notebook we defined `square` to be the function that sends `x` to `x ** 2`).  What should the output be, roughly?","pos":17,"type":"cell"}
{"id":0,"time":1611420534984,"type":"user"}
{"last_load":1611420535147,"type":"file"}