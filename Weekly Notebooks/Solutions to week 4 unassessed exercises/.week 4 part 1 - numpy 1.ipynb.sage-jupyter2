{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-760f3d5d-6c54-4d6a-b802-25e0e0e928bc.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1612537641677,"exec_count":1,"id":"4e9026","input":"import numpy as np\nx = np.array([[0], [0], [1]])\ny = np.array([[3, 2, 1]])\nB = np.array([[1, 2, 3], [3, 2, 1], [1, 2, 3]])","kernel":"python3","pos":32,"start":1612537641660,"state":"done","type":"cell"}
{"cell_type":"code","end":1612537643453,"exec_count":2,"id":"8346ea","input":"x.shape # should be (3, 1)","kernel":"python3","output":{"0":{"data":{"text/plain":"(3, 1)"},"exec_count":2}},"pos":34,"start":1612537643448,"state":"done","type":"cell"}
{"cell_type":"code","end":1612537646309,"exec_count":3,"id":"efbde5","input":"y.shape # should be (1, 3)","kernel":"python3","output":{"0":{"data":{"text/plain":"(1, 3)"},"exec_count":3}},"pos":35,"start":1612537646304,"state":"done","type":"cell"}
{"cell_type":"code","end":1612537647133,"exec_count":4,"id":"ac604c","input":"B.shape # should be (3, 3)","kernel":"python3","output":{"0":{"data":{"text/plain":"(3, 3)"},"exec_count":4}},"pos":36,"start":1612537647124,"state":"done","type":"cell"}
{"cell_type":"code","end":1612537872866,"exec_count":9,"id":"e92c85","input":"def dotproduct(x, y):\n    \"\"\"\n    input: numpy arrays x and y, both with shape (n, 1) for some n\n    output: the dot product of x and y\n    \"\"\"\n    dp = 0\n    for i in range(x.shape[0]):\n        dp = dp + x[i][0] * y[i][0]\n    return dp\n    # when you've learned about NumPy matrix multiplication you can do\n    # return np.matmul(x, y.transpose())[0, 0]\n\nx = np.array([[1],[2],[3]])\ny = np.array([[3],[2],[1]])\nprint(x.shape, y.shape)\ndotproduct(x,y)","kernel":"python3","output":{"0":{"name":"stdout","text":"(3, 1) (3, 1)\n"},"1":{"data":{"text/plain":"10"},"exec_count":9}},"pos":38,"start":1612537872859,"state":"done","type":"cell"}
{"cell_type":"code","end":1612537928305,"exec_count":13,"id":"631453","input":"print(arraysum(np.array([1,2,3]))) # should be 6\nprint(arraysum(np.array([[1,2,3]]))) # should be 6\nprint(arraysum(np.array([[1],[2],[3]]))) # should be 6\nprint(arraysum(np.array([[1,2],[3,4]]))) # should be 10","kernel":"python3","output":{"0":{"name":"stdout","text":"6\n6\n6\n10\n"}},"pos":42,"start":1612537928294,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0688c1","input":"A[0, :].reshape(1, 2) # the 0th row as a 1x2 row vector","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0dbfc9","input":"A[:, 0].reshape(2,1) # the 0th column as a 2x1 column vector","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2b065b","input":"np.array_equal(v, w)","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"93f9d8","input":"v = np.array([[1, 2, 3]])\nw = np.array([[3, 2, 1]])\nv == w","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c0e569","input":"np.array_equal(v, v)","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"5ef250","input":"import numpy as np\nv = np.array([[1, 2]])         # 1x2 row vector - a list containing one row, [1, 2]\nw = np.array([[1], [2]])       # 2x1 column vector - a list of two rows, [1] and [2]\nA = np.array([[1, 2],[3, 4]])  # 2x2 matrix - a list containing two rows, [1,2] and [3,4]\n\nprint(v, \" is a 1x2 row vector\\n\")\nprint(w, \" is a 2x1 column vector \\n\")\nprint(A, \" is a 2x2 matrix\")","output":{"0":{"name":"stdout","output_type":"stream","text":"[[1 2]]  is a 1x2 row vector\n\n[[1]\n [2]]  is a 2x1 column vector \n\n[[1 2]\n [3 4]]  is a 2x2 matrix\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"f5d938","input":"v = np.array([[1,2,3]]) # 1x3 row vector\nw = np.array([[1], [2], [3]]) # 3x1 column vector\nprint(v[0][1]) # entry in column 1 of the row vector v\nprint(w[1, 0]) # entry on row 1 of the column vector w","output":{"0":{"name":"stdout","output_type":"stream","text":"2\n2\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"045a03","input":"v1 = np.array([1,2,3])    # a 1-D array with length 3\nv2 = np.array([[1,2,3]])  # a 2-D array with shape (1,3)\nprint(\"v1 has shape\", v1.shape, \"and v2 has shape\", v2.shape)","output":{"0":{"name":"stdout","output_type":"stream","text":"v1 has shape (3,) and v2 has shape (1, 3)\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"1b008f","input":"def arraysum(A):\n    \"\"\"\n    input:  a numpy array A of any shape\n    output: the sum of the entries of A\n    \"\"\"\n    total = 0\n    for x in np.nditer(A):\n        total = total + x\n    return total\n\n# you could also just use np.sum(A)","kernel":"python3","pos":40,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"9e10ad","input":"A = np.array([[1, 2], [3, 4]])\nprint(A[1, :]) # row 1 of A, as a 1 dimensional array - the : is shorthand for \"all entries\"","output":{"0":{"name":"stdout","output_type":"stream","text":"[3 4]\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"a3969e","input":"A[:, 0] # column 0 of A, as a 1D array","output":{"0":{"data":{"text/plain":"array([1, 3])"},"exec_count":13,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"23da03","input":"print(v.shape)  # v is a row vector, so it is 1x2\nprint(w.shape)  # w is a 2x1 column vector\nprint(A.shape)  # A is a 2x2 matrix","output":{"0":{"name":"stdout","output_type":"stream","text":"(1, 2)\n(2, 1)\n(2, 2)\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"02bad8","input":"A.transpose()","output":{"0":{"data":{"text/plain":"array([[1, 3],\n       [2, 4]])"},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"07697f","input":"A","output":{"0":{"data":{"text/plain":"array([[1, 2],\n       [3, 4]])"},"exec_count":4,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"1e8a4f","input":"np.linspace(0, 1, 11) # 11 equally spaced points starting at 0, ending at 1","output":{"0":{"data":{"text/plain":"array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])"},"exec_count":5,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d7ad96","input":"np.linspace(1, 3, 9) # 9 equally spaced points starting at 1, ending at 3","output":{"0":{"data":{"text/plain":"array([1.  , 1.25, 1.5 , 1.75, 2.  , 2.25, 2.5 , 2.75, 3.  ])"},"exec_count":6,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"29e52a","input":"A[1][1]","output":{"0":{"data":{"text/plain":"4"},"exec_count":7,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"fbba6d","input":"A[0, 1]","output":{"0":{"data":{"text/plain":"2"},"exec_count":8,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"d8f102","input":"A[1][0]","output":{"0":{"data":{"text/plain":"3"},"exec_count":9,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"0d6a43","input":"You can extract rows or columns from a 2-dimensional array with a kind of slice notation similar to that we used for lists and strings. Here's how to get rows:","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"181393","input":"If you need to reshape these into 2D arrays you can use `np.reshape` - for example:","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"2580c7","input":"You have to be careful when accessing elements of row and column vectors defined as $1\\times n$ and $n\\times 1$ numpy arrays.  Since numpy sees these as two-dimensional arrays, you have to use two pairs of square brackets:\n - the $j$th element of the row vector `v` is `v[0][j]` or `v[0, j]`\n - the $i$th element of the column vector `w` is `w[i][0]` or `w[i, 0]`","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"3dbc0d","input":"NumPy distinguishes between one-dimensional arrays, which have shape `(n,)` (a size-one tuple with `n` elements), and two-dimensional arrays with shape `(1,n)`, even though these are both essentially lists of `n` numbers.  This can be confusing - be careful!","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"579176","input":"## Exercise 2 - write your own dot product\n\nWrite a function that returns the dot product of two $n\\times 1$ NumPy arrays. Your function should work for any $n$ - but if you are unsure how to start, try making a function that works only for $n=2$.\n\nThe dot product of $\\begin{pmatrix} x_1\\\\x_2\\end{pmatrix}$ and $\\begin{pmatrix} y_1\\\\ y_2\\end{pmatrix}$ is defined to be the number $x_1y_1+x_2y_2$, and it is defined similarly for larger vectors.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"5c1d1f","input":"## Exercise 3 - sum of array entries\n\nIf you want to write a for loop that where the index variable takes every value in a NumPy array `A` in turn, `for x in A:` won't work if the array is 2-dimensional (remember that our row and column vectors are 2-dimensional). Instead you can use `for x in np.nditer(A):` which will make `x` have the value of each of the entries of `A` in turn.\n\n**Write a function that returns the sum of the entries of a numpy array of any shape.**","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"6430c0","input":"# Week 4 part 1 - NumPy\n\nIn this notebook you will learn about one of the most widely used mathematical Python modules: NumPy.  You can read more about NumPy [on their homepage](https://numpy.org/).\n\nNumPy is a Python module which has functions for working with vectors and matrices (and higher-dimensional arrays) and for working with random numbers.  [Here is a link to the documentation](https://numpy.org/doc/stable/).\n\nOf course, if we wanted we could represent matrices and vectors using lists in plain Python and write functions to do matrix multiplication, vector addition, and so on. The advantage of NumPy  is that all this code has been written and tested for us by experts in numerical linear algebra.  The big number of high-quality, popular, and freely available modules for mathematical computing is one reason you're learning Python instead of another computer language.\n\nYou often see NumPy imported using `import numpy as np`.  As you saw in the previous notebook this just saves a bit of typing: after doing this you can use `np.functionName` instead of `numpy.functionName`.\n\n## NumPy arrays\n\nThe most important object NumPy provides is the `array`.  These are rectangular grids of numbers which you can use to represent matrices and vectors.  The easiest way to create arrays is by using `np.array()` with the argument being a list of the rows of the matrix or vector you want to create, each row being a list of its entries.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"7125bf","input":"You can get the shape of an array `a` with `a.shape`","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"8ac659","input":"**Check their shapes.**","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"8e80bd","input":"`A.transpose()` returns a new array which is the transpose of `A`. It doesn't modify `A` itself, as you can see by running the next cell:","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"8f06f6","input":"## Equality of arrays\n\nYou **cannot** use `==` to check if two NumPy arrays are equal! NumPy overrides the `==` operator so that if `v` and `w` are arrays, `v == w` is an array with `True` in the positions where `v` and `w` are equal and `False` in the positions where they are different.","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"b1a44f","input":"## Unassessed exercises\n\n### Exercise 1 - creating arrays\n\nIt's very important to remember that the input of the `np.array` function must be a list whose elements are lists which represent the rows of the matrix or vector you're trying to create.  In particular, if you want to create a row vector the argument of `np.array` should be a list containing another list whose elements are the entries of your row vector.\n\n**Create the vectors $\\mathbf{x} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\end{pmatrix}, \\mathbf{y} = \\begin{pmatrix}3&2&1\\end{pmatrix}$ and the matrix $B = \\begin{pmatrix} 1 & 2 & 3 \\\\ 3 & 2 & 1 \\\\ 1 & 2 & 3 \\end{pmatrix}$ as numpy arrays.**","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"c9869e","input":"## Accessing array elements\n\nTo access the entries of an array you can use the square-bracket index notation just like for lists, remembering that Python uses indices starting at 0, not 1.  If `A` is a two-dimensional array then either `A[i, j]` or `A[i][j]` can be used to get the entry in row `i`, column `j`.\n\nWhat will the following commands print?","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"cb4a57","input":"and you can transpose an array with the `.transpose()` method","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"d12c3e","input":"You can use a for loop to do something for each element of a 1-dimensional array in turn:","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"d1dfe0","input":"Here are some test cases for your function.","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"d246a5","input":"The `np.linspace` function will be very useful later when we want to plot graphs of functions.  To create a one-dimensional array of `n` equally spaced points starting at `a` and ending at `b`, use `np.linspace(a, b, n)`:","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"daba90","input":"If you want to check if two arrays are equal you need to use `np.array_equal(x, y)`, which is `True` if and only if `x` and `y` are arrays with the same shape and the same entries.","pos":28,"type":"cell"}
{"id":0,"time":1612537943331,"type":"user"}
{"last_load":1612537183856,"type":"file"}