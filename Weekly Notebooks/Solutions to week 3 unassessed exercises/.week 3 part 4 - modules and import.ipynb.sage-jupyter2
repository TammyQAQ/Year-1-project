{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-0efeec11-afe8-42dc-aa99-65f5a652d6cb.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1612536550171,"exec_count":2,"id":"2dbbb1","input":"import math\n\nclass Complex:\n    def __init__(self, real, imag):\n        self.real_part = real\n        self.imaginary_part = imag\n\n    def __mul__(self, other):\n        new_real_part = self.real_part * other.real_part - self.imaginary_part * other.imaginary_part\n        new_imaginary_part = self.real_part * other.imaginary_part + self.imaginary_part * other.real_part\n        return Complex(new_real_part, new_imaginary_part)\n\n    def __str__(self):\n        return str(self.real_part) + \" + \" + str(self.imaginary_part) + \"i\"\n\n    def __eq__(self, other):\n        return (self.real_part == other.real_part) and (self.imaginary_part == other.imaginary_part)\n\n    def argument(self):\n        return math.atan2(self.real_part, self.imaginary_part)\n\n    def absolute_value(self):\n        return (self.real_part ** 2 + self.imaginary_part ** 2) ** 0.5","kernel":"python3","pos":12,"start":1612536550165,"state":"done","type":"cell"}
{"cell_type":"code","end":1612536595626,"exec_count":5,"id":"d274e2","input":"z = Complex(1, 1)                          # z is 1+i\nw = Complex(-1, -1)                        # w is -1-i\nprint(z.absolute_value(), w.absolute_value()) # both should be sqrt(2)\nprint(\"The argument of z is \", z.argument()) # should be about 0.785\nprint(\"The argument of w is \", w.argument()) # should be about -2.356","kernel":"python3","output":{"0":{"name":"stdout","text":"1.4142135623730951 1.4142135623730951\nThe argument of z is  0.7853981633974483\nThe argument of w is  -2.356194490192345\n"}},"pos":14,"start":1612536595621,"state":"done","type":"cell"}
{"cell_type":"code","end":1612536814152,"exec_count":7,"id":"0f84cd","input":"def cartesian(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta) # Euler's formula: re^{i theta} = r cos(theta) + i r sin(theta)\n    return Complex(x, y)\n\nprint(cartesian(1, math.pi)) # not quite -1 because we only have a finite number of decimals, but very close","kernel":"python3","output":{"0":{"name":"stdout","text":"-1.0 + 1.2246467991473532e-16i\n"}},"pos":16,"start":1612536814146,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"639fd5","input":"from math import *\nexp(-8) + tan(pi / 2 - 0.001)","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"4fb1c5","input":"import math\nprint(math.atan(99999))  # math.atan is the tan^(-1) function\nprint(math.pi)           # math.pi = 3.141592...\nprint(math.sin(math.pi / 2))        # math.sin is the sin function, in radians","output":{"0":{"name":"stdout","output_type":"stream","text":"1.570786326694896\n3.141592653589793\n1.0\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"302cb0","input":"from math import sin\nsin(1)","output":{"0":{"data":{"text/plain":"0.8414709848078965"},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"ebf6f0","input":"from math import cos, pi, tan\ncos(pi / 2)","output":{"0":{"data":{"text/plain":"6.123233995736766e-17"},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"d0d395","input":"import math as maths\nmaths.e","output":{"0":{"data":{"text/plain":"2.718281828459045"},"exec_count":4,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"1b3dae","input":"There are several different ways to use `import`.  You can do `from math import functionname` to import only the function `functionname`, which can then be used like a normal function, without the dot:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"1f1e08","input":"Now test your answer by computing the absolute value and argument for some complex numbers and checking they are correct.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"20248c","input":"Usually this is done when modules have a name which you want to shorten to save typing. For example, the `numpy` module which we meet next week is usually imported with `import numpy as np`","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"314164","input":"You can import several functions or objects by lising them separated by commas:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"6f709c","input":"# Week 3 mart 4 - modules and `import`\n\nA *module* is a collection of Python functions and objects which you can use your own code with the help of the `import` command.\n\nTo import a module, `math` for example, you add the line `import math` to your code - usually at the top.  The `math` module is included with any Python installation.\n\nOnce you've `import`ed your module, you access its code using dot notation just like for class methods and instance variables.  You only need to import the module once per notebook.\n\nYou can get a list of the attributes and methods provided by a module with `dir(modulename)` but it will only tell you their names, not what they do. To find out what functions and objects a module provides, search for its documentation on the internet - [here is the documentation for `math`](https://docs.python.org/3/library/math.html) for example.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"73a7c9","input":"## Unassessed exercises\n\n### Exercise 1: a polar form for the complex class\n\nAdd `absolute_value` and `argument` methods to the `Complex` class.  The absolute value $|z|$ of a complex number $z=x+iy$ is $\\sqrt{x^2 + y^2}$. The argument of $z=x+iy$ is the angle in radians between the positive real axis and the line through the origin and $z$.  This can be slightly tricky to calculate as there are several cases (you will sometimes see people claim it is $\\tan^{-1}(y/x)$ - that's wrong!) - luckily the function `math.atan2(x, y)` will compute it for you.","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"958222","input":"### Exercise 2: polar form to Cartesian form\n\nWrite a function `cartesian(r, theta)` which returns an object of our `Complex` class that represents $re^{i\\theta}$.  You will need to use `math.cos` and `math.sin` to help you compute the real and imaginary parts of $re^{i\\theta}$.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"996da2","input":"This makes using the functions from `math` more convenient, because you can type `sin` instead of `math.sin`, but you need to be careful: if your own program has a function with the same name as one in a module that you import this way, or if you import two modules and they contain functions with the same names, you could have problems.\n\nFinally, you can import a module and give it a different name. After doing `import math as maths` you can refer to the `sin` function with `maths.sin`, for example","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"ed129c","input":"(`math.pi` is only an approximation to $\\pi$ and `math.cos` is only an approximation to the \"true\" cosine function, so you shouldn't be surprised that the output of the last cell is not precisely zero.  Remember from the week 1 notebooks that `6.1e-17` means $6.1 \\times 10^{-17}$, an extremely small number)\n\nYou can even import all functions from math by using `*`","pos":6,"type":"cell"}
{"id":0,"time":1612536441800,"type":"user"}
{"last_load":1612536442004,"type":"file"}