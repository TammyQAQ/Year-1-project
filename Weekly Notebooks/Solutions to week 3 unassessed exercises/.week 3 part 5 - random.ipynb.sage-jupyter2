{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-1cc95b81-a006-407c-a934-b92693818f36.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1612537112007,"exec_count":2,"id":"ed60df","input":"import random\n\nchoices_total = 0\nsample_total = 0\nfor i in range(1000):\n    choices_total = choices_total + sum(random.choices(range(1,11), k=3))\n    sample_total = sample_total + sum(random.sample(range(1, 11), 3))\nprint(\"choices average: \", choices_total / 1000)\nprint(\"samples average: \", sample_total / 1000)\n# the averages should be very similar","kernel":"python3","output":{"0":{"name":"stdout","text":"choices average:  16.665\nsamples average:  16.66\n"}},"pos":24,"start":1612537111996,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cbd4e7","input":"random.uniform(0, 1)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"3d749b","input":"import random\ncount = {i : 0 for i in range(1, 6)} # a \"dictionary comprehension\"\n\nfor i in range(1000):\n    r = random.randint(1,5)\n    count[r] = count[r] + 1\n\nprint(count) # each entry should be very roughly 200","kernel":"python3","output":{"0":{"name":"stdout","text":"{1: 229, 2: 177, 3: 221, 4: 189, 5: 184}\n"}},"pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"4b581e","input":"random.choice(['a', 'b', 'c'])","output":{"0":{"data":{"text/plain":"'c'"},"exec_count":10,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"1034fb","input":"random.choices(['a', 'b', 'c'], k=10)","output":{"0":{"data":{"text/plain":"['c', 'c', 'b', 'b', 'a', 'a', 'c', 'b', 'a', 'c']"},"exec_count":12,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"48f29b","input":"random.sample(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], 3)","output":{"0":{"data":{"text/plain":"['d', 'h', 'g']"},"exec_count":13,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"e63c3d","input":"random.sample([1, 2, 3], 4)","output":{"0":{"ename":"ValueError","evalue":"Sample larger than population or is negative","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-02425c4b55fb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/lib/python3.8/random.py\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, population, k)\u001b[0m\n\u001b[1;32m    361\u001b[0m         \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpopulation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 363\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Sample larger than population or is negative\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    364\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m         \u001b[0msetsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m21\u001b[0m        \u001b[0;31m# size of a small set minus size of an empty list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Sample larger than population or is negative"]}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"1581c0","input":"l = [1, 2, 3, 4, 5, 6, 7]\nrandom.shuffle(l)\nl","output":{"0":{"data":{"text/plain":"[2, 6, 5, 4, 1, 3, 7]"},"exec_count":15,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"deedbe","input":"import random\nrandom.randint(1, 100)","output":{"0":{"data":{"text/plain":"44"},"exec_count":2,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"7a86d4","input":"random.randint(1, 2)","output":{"0":{"data":{"text/plain":"1"},"exec_count":4,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"037d21","input":"p = random.uniform(0, 1)\nif p > 0.5:\n    print(\"heads\")\nelse:\n    print(\"tails\")","output":{"0":{"name":"stdout","output_type":"stream","text":"tails\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"55d439","input":"random.gauss(0, 1)","output":{"0":{"data":{"text/plain":"-1.4359242881768777"},"exec_count":9,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"053acd","input":"This is useful if you want to generate events with a specified probability. For example, suppose you want to simulate flipping a fair coin by printing \"heads\" with probability 0.5 and \"tails\" with probability 0.5. The probability that `random.uniform(0, 1)` returns a value larger than 0.5 is 0.5, so you could do","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"41a277","input":"Note that `random.randint(a, b)` includes `b` in its range of possible values, unlike `range(a, b)` for example: try","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"6054dc","input":"### Exercise 2: with and without replacement\n\n- Find the average sum of 1000 randomly chosen lists of 3 elements of `[1, 2, ..., 10]`.\n- Find the average sum of 1000 randomly chosen lists of 3 **distinct** elements of `[1, 2, ..., 10]`.\n\nAre they approximately equal?\n\nRecall that you can find the sum of the numbers in a list `l` with `sum(l)`.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"6b06c8","input":"If you run the cell above a few times you should see the output 2.\n\nIf you want random decimal numbers, use `random.uniform(a, b)` which is a randomly chosen `float` between `a` and `b` - this is a simulation of the uniform distribution on $[a,b]$. ","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"7ddfff","input":"## Random choices\n\nThe `random` module provides convenient functions for sampling with and without replacement from Python sequence types.\n\n`random.choice` picks a single element uniformly at random:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"86b774","input":"The `random` library can also other common probability distributions - read the documentation for details. For example, `random.gauss(mu, sigma)` is an observation of a normally distributed random variable with mean `mu` and standard deviation `sigma`","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"9bb14e","input":"Notice that `random.shuffle` modifies its argument. In the cell above, `l` has been changed to a new list.","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"acde84","input":"## Random permutations\n\nYou can randomly reorder a list `l` with `random.shuffle`","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"ae7a2f","input":"\"Without replacement\" means that you can't get the same element twice, so `random.sample(l, n)` will give an error if `n` is larger than the size of `l`:","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"e702cb","input":"## Unassessed exercises\n\n### Exercise 1: how random is `random`?\n\n- Create a dictionary `count` with keys 1, 2, 3, 4, 5 and values 0, 0, 0, 0, 0.\n- Using `random.randint` and a for loop, generate 1000 random integers between 1 and 5 inclusive.\n- Each time you generate a number `i`, increase `count[i]` by 1.\n\nHow big do you expect each `count[i]` to be after the loop finishes?  See how close the actual numbers are to your prediction.","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"f2a787","input":"# Week 3 part 5 - the `random` module\n\nAnother module we used before in MATH0011 is `random`, which has functions for working with randomness.  The full documentation for the random module [is at this link](https://docs.python.org/3.8/library/random.html) - in this notebook we will only go through a few of its functions.\n\nThe next command generates an integer chosen uniformly at random from $\\{1, 2, \\ldots, 100\\}$:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"f984ea","input":"`random.choices(l, k=n)` returns a list of `n` elements chosen uniformly at random from `l` *with replacement*. That means you can get the same element multiple times.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"fa8655","input":"If you want to sample `n` things from a sequence `l` *without* replacement use `random.sample(l, n)`.","pos":14,"type":"cell"}
{"id":0,"time":1612536852688,"type":"user"}
{"last_load":1612536852908,"type":"file"}