{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-32dc7ce6-2cec-4942-a513-b83208d191db.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"code","end":1612536004333,"exec_count":1,"id":"850275","input":"unit_words = {1 : \"one\", 2 : \"two\", 3 : \"three\", 4 : \"four\", 5 : \"five\", 6 : \"six\", 7 : \"seven\", 8 : \"eight\", 9 : \"nine\"}","kernel":"python3","pos":26,"start":1612536004277,"state":"done","type":"cell"}
{"cell_type":"code","end":1612536009937,"exec_count":2,"id":"3c63d6","input":"tens_words = {2 : \"twenty\", 3 : \"thirty\", 4 : \"forty\", 5 : \"fifty\", 6 : \"sixty\", 7 : \"seventy\", 8 : \"eighty\", 9 : \"ninety\"}","kernel":"python3","pos":28,"start":1612536009928,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0bbb25","input":"phoneNumbers[\"UCL Maths\"]","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2bf32e","input":"phoneNumbers = {}","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"30b476","input":"phoneNumbers[\"UCL Admissions\"]","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"39b266","input":"phoneNumbers[\"UCL Security\"]","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3a344d","input":"counter.keys()","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"462918","input":"\"UCL Maths\" in phoneNumbers","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4b3984","input":"del phoneNumbers[\"UCL Admissions\"]","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"600e10","input":"\"UCL Admissions\" in phoneNumbers","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"77af12","input":"counter.values()","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b948fe","input":"phoneNumbers = {\"UCL Security\" : \"222\", \"UCL Admissions\" : \"020 3370 1215\"}","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c0d82f","input":"counter = {i : 0 for i in range(10)}","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"caa708","input":"phoneNumbers[\"UCL Admissions\"]","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"dbaea3","input":"for name in phoneNumbers:\n    print(\"the number for\", name, \"is\", phoneNumbers[name])","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fe6dba","input":"phoneNumbers[\"UCL Admissions\"] = \"020 3370 1215\"\nphoneNumbers[\"UCL Security\"] = \"222\"","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"49e42d","input":"def say(tens, units):\n    if units != 0:\n        print(tens_words[tens] + \"-\" + unit_words[units])\n    else:\n        print(tens_words[tens])\n\nsay(4,2)\nsay(9,0)","kernel":"python3","output":{"0":{"name":"stdout","text":"forty-two\nninety\n"}},"pos":30,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"796832","input":"teens = {0 : 'ten', 1 : 'eleven', 2 : 'twelve', 3 : 'thirteen', 4 : 'fourteen', 5 : 'fifteen', 6 :'sixteen', 7: 'seventeen', 8 : 'eighteen', 9 : 'nineteen'}\n\ndef say(n):\n    # say a one- or two-digit number n\n\n    if n >= 10:\n        tens = int(str(n)[0])\n        units = int(str(n)[1]) # there are other ways to do this, this is easiest\n    else:\n        tens = 0\n        units = int(str(n)[0])\n    if tens >= 2:\n        if units != 0:\n            print(tens_words[tens] + \"-\" + unit_words[units])\n        else:\n            print(tens_words[tens])\n    if tens == 1:\n        print(teens[units])\n    if tens == 0:\n        print(unit_words[units])\n\nsay(5)\nsay(15)\nsay(50)\nsay(95)","kernel":"python3","output":{"0":{"name":"stdout","text":"five\nfifteen\nfifty\nninety-five\n"}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"029813","input":"## Iterating over a dictionary\n\nIt's common to want to do something for every entry in a dictionary. You can use for loops: if `d` is a dictionary then\n\n```python\nfor k in d:\n    # loop body\n```\nwill run the loop body with `k` set to each of the keys of the dictionary `d`. For example:","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"42fc29","input":"What do you think the keys and values are in `counter`?  You can find out by calling `counter.keys()` and `counter.values()`","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"4332bd","input":"## Other ways to create dictionaries\n\nInstead of starting with an empty dictionary and adding entries like we did above, you can create a new dictionary with some entries already specified like this:","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"459f17","input":"Further suggestions:\n\n- modify `say` so that it can deal with the numbers 10, 11, ..., 19 as well\n- modify `say` so that it can deal with all numbers between 0 and 99\n- modify `say` so that instead of calling `say(4, 2)`, for example, I can instead call `say(42)`\n","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"6fbac7","input":"# Week 3 part 1 - dictionaries\n\nA list `l` has entries `l[0], l[1], ..., l[len(l)-1]`, so the data in the list are indexed by the numbers `0, 1, ..., len(l)-1`.  Sometimes it is more natural to index data with something other than 0, 1, 2,...\n\nAs an example, suppose we are writing a program and want to store people's telelphone numbers.  Given someone's name, we will want to access their number.  A natural and easy-to-use way to do this would be to create an object `phoneNumbers` such that `phoneNumbers[\"UCL Security\"]` is UCL Security's phone number.\n\nThe `dict` type, short for dictionary, allows us to do exactly this.  A dictionary has *keys* (in our example, people's names), and associated to each key is a *value* (in our example, the person's phone number).  The value in a dictionary `myDict` associated to the key `k` is accessed with `myDict[k]`.\n\nYou can create an empty dictionary using `{}`","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"79f2e4","input":"## Unassessed exercises\n\n### Exercise 1\n\nIn this exercise you are going to teach Python how to say certain numbers in English.\n\nCreate a dictionary `unit_words` whose keys are 1, 2, ..., 9 such that `unit_words[1] = \"one\"`, `unit_words[2] = \"two\"`, and so on.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"8d1cab","input":"You can check if a dictionary has a value for a certain key using `in`...","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"986c67","input":"Now use your dictionaries to write a function `say(tens, units)` which returns a string representing how the number `10 * tens + units` is spoken in English. For example, `say(4, 2)` should be `\"forty-two\"`, and `say(2, 5)` should be `\"twenty-five\"`.  **You can assume `tens >= 2`**","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"998efc","input":"...which is useful because asking for a key for which no value is set raises a `KeyError`:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"9eb94e","input":"We've already seen how to add a key, but we can also remove one using `del`:","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"b1bc37","input":"Once you've created a dictionary `d` you can add a key `k` with value `v` by assigning `d[k] = v`","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"bb9589","input":"You can even do a \"dictionary comprehension\", like the list comprehensions we met last week.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"bbf14c","input":"Now create a dictionary `tens_words` whose keys are 2, 3, ..., 9 such that `tens_words[2] = \"twenty\"`, `tens_words[3] = \"thirty\"`, and so on.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"f87e7b","input":"Now that it's removed, asking for `phoneNumbers[\"UCL Admissions\"]` raises a `KeyError`","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"fe085f","input":"Now `phoneNumbers` is a dictionary with two keys, whose values you can access as follows:","pos":4,"type":"cell"}
{"id":"788117","input":"","pos":33,"type":"cell"}
{"id":0,"time":1612535696294,"type":"user"}
{"last_load":1612535696631,"type":"file"}