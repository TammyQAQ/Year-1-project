{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-441548fe-077d-43e4-9f27-03f9e1a0ebc1.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"537b31","input":"","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"63c554","input":"","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a6f5f6","input":"","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b4cc17","input":"l = [1, [2, 3, [4, 5]], 6, \"hello\"]\n","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d9b495","input":"","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"ec088f","input":"len(emptyList)","output":{"0":{"data":{"text/plain":"0"},"exec_count":10,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"d23953","input":"len(mix)","output":{"0":{"data":{"text/plain":"5"},"exec_count":11,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"0923a4","input":"myList[0] # recall that myList is [5, 4, 3, 2, 1]","output":{"0":{"data":{"text/plain":"5"},"exec_count":12,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"207a7e","input":"myList[1]","output":{"0":{"data":{"text/plain":"4"},"exec_count":13,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"3c033b","input":"myList[5]","output":{"0":{"ename":"IndexError","evalue":"list index out of range","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-7d41bfdf9e2b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmyList\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"b63635","input":"myList[-1]","output":{"0":{"data":{"text/plain":"1"},"exec_count":15,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"0983d7","input":"mix[2][0]","output":{"0":{"data":{"text/plain":"'t'"},"exec_count":16,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"9562c1","input":"l = [1, 2, 3]\nl[2] = 99\nl","output":{"0":{"data":{"text/plain":"[1, 2, 99]"},"exec_count":17,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"a4eb76","input":"l = [6, 5, 4, 3, 2, 1]\nl[1:4] # the list consisting of the elements of l in positions 1, 2, 3","output":{"0":{"data":{"text/plain":"[5, 4, 3]"},"exec_count":18,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"6a168c","input":"l = [6, 5, 4, 3, 2, 1]\nprint(l[3:]) # all the elements from position 3 to the end of l\nprint(l[:3]) # all the elements from the start of l to position 2","output":{"0":{"name":"stdout","output_type":"stream","text":"[3, 2, 1]\n[6, 5, 4]\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"810283","input":"len(l[1:1+3])","output":{"0":{"data":{"text/plain":"3"},"exec_count":20,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"abb27b","input":"type(myList)","output":{"0":{"data":{"text/plain":"list"},"exec_count":4,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"75acc7","input":"myList = [5, 4, 3, 2, 1]","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"ee6007","input":"emptyList = []","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"ddcc00","input":"mix = [1, 2.0, \"three\", [1, 2, 3, 4], False]","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"b979de","input":"len(myList)","output":{"0":{"data":{"text/plain":"5"},"exec_count":9,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"09ba49","input":"There's a special way to get the last element of a list: ask for the element with index -1.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"4628d5","input":"# [Lists](https://docs.python.org/3/library/stdtypes.html#lists)\n\nLists let us represent an ordered sequence of data. We enter lists by using square brackets and commas:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"5a51f6","input":"You might think that the fact that `l[a:b]` gives you the elements in positions `a` up to `b-1`, not `b`, is annoying, but it does at least have one benefit: the length of `l[a:b]` is `b - a`. This means that `l[a:a+k]` always has length `k`.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"5c348d","input":"List elements can be of mixed types - you can even have lists as list elements.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"60da17","input":"## Slices\n\nThere's a generalization of the `l[i]` notation called a **slice** which is used for getting all elements of a list between two indices.  This is written with a colon: `l[a:b]` is the list `[l[a], l[a+1], ..., l[b-2], l[b-1]`.\n\nNotice that `l[a:b]` gives you the elements of `l` whose indices are `a, a+1, ..., b-2, b-1` just like `range(a,b)` gives you the numbers `a, a+1, ..., b-2, b-1.`.\n\nHere's an example:","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"6d9e4d","input":"The valid positions of elements in `myList` are 0, 1, 2, 3, and 4.  If you try `myList[5]` you will get an error.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"9bb9b0","input":"**Change the two numbers in the cell above** (but nothing else except the two numbers) **so that the output is `4`**.\n\nYou can change what's in the `i`th place of a list `l` by assigning to `l[i]`.  (Because lists can be changed after they've been created, they're called *mutable*).","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"c1b728","input":"Let's call an expression like `l[1]` or `l[0][2]`, which returns an element of `l` or an element of an element of `l` and so on, a **list access** to `l`.  What list accesses to `l` would produce the following output?\n\n- `6`\n- `3`\n- `4`\n- `'o'`","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"c3d809","input":"## Unassessed exercises\n\n### Exercise 1\n\n\nLet\n```\nl = [1, [2, 3, [4, 5]], 6, \"hello\"]\n```\n\nWhat will be the results of the following Python commands?\n\n1. `l[1]`\n0. `len(l)`\n1. `l[1][0]`\n2. `l[4]`\n3. `l[2:4]`\n4. `l[1][1:2]`\n\nCheck your answers in the cell below.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"df9bc2","input":"What will `mix[2][0]` be? Remember that mix` is [1, 2.0, \"three\", [1, 2, 3, 4], False]","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"eb20db","input":"## Accessing list elements\n\nOnce you've created a list, you might want to get back the elements of that list.  You can get the `i`th element of a list `l` using the syntax `l[i]`, but there's a catch: **Python lists start at position zero**, just like strings do.  So `myList[0]` will be `5` and `myList[1]` will be `4`","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"f4124c","input":"If you want all elements from positions 0 to `b - 1`, you can  use `l[:b]` instead of `l[0:b]`. Similarly if you want all the elements from position `b` up to the end of `l`, you can use `l[b:]` instead of `l[b:len(l)]`.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"fd7523","input":"Like for strings, `len` tells you the length of a list.  What do you think `len(mix)` will be?","pos":6,"type":"cell"}
{"id":0,"time":1614969364489,"type":"user"}
{"last_load":1614969364222,"type":"file"}