{"attachments":{},"cell_type":"markdown","id":"caf0e9","input":"### Exercise 2\n\nTo approximate the integral from $a$ to $b$ of a function $f$ we can pick a large number $N$ and numbers \n\n$$a=x_0 < x_1 < \\cdots < x_N = b$$\n\nthen add up the areas of the rectangles with base $[x_i, x_{i+1}]$ and height $f(x_i)$.  Here's a picture showing these rectangles for $f(x)=x^2, a=0, b=2, N=4, x_1=0.5, x_2 = 1, x_3 = 1.5$:\n\n![leftriemann2.svg](attachment:leftriemann2.svg)\n\n(if you can't see the image, click [this link](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/LeftRiemann2.svg/600px-LeftRiemann2.svg.png))\n\nThis method of approximating an integral is called the rectangle rule.\n\nThe simplest way to choose the $x_i$s is to take $x_i = a + i\\frac{(b-a)}{N}$, so that each rectangle has width $\\frac{(b-a)}{N}$.  This gives the following approximation:\n\n$$ \\int_a ^b f(x)\\, \\mathrm{d}x \\approx \\frac{b-a}{N} \\sum_{i=0}^{N-1} f\\left(a + \\frac{(b-a)i}{N}\\right) $$\n\n**Complete the definition of the function `rectangle_rule(f, a, b, N)` below.**","pos":8,"type":"cell"}
{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-eff6b43b-fd83-4de9-b872-ce5061e4eec2.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0ecff4","input":"","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5334f2","input":"def rectangle_rule(a, b, N):\n    total = 0\n    for i in range(N):\n        total = # your code goes here\n    return ((b-a) / N) * sum","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"72c020","input":"rectangle_rule(g, 0, 1, 100)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b55b6a","input":"def g(x):\n    return x ** 2","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cc7317","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f9abbe","input":"","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"06a9c7","input":"running_total = 0\n\nfor i in range(6):    # why 6, not 5??\n    running_total = running_total + 2*i + 1\n\nprint(running_total)","output":{"0":{"name":"stdout","output_type":"stream","text":"36\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"396702","input":"running_total = 1\n\nimport math\nfor i in range(11):\n    running_total = running_total * (2 * i + 1)\n\nprint(running_total)","output":{"0":{"name":"stdout","output_type":"stream","text":"13749310575\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"7ac0bb","input":"is_prime(1)","output":{"0":{"data":{"text/plain":"False"},"exec_count":27,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"3d7117","input":"def is_prime(n):\n    if n==1:\n        return False\n    for i in range(2, round(n ** 0.5)+1):\n        if n % i == 0:\n            return False\n    return True","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"a06939","input":"for p in [2, 3, 5, 7]:\n    print(p)","output":{"0":{"name":"stdout","output_type":"stream","text":"2\n3\n5\n7\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"b25e7c","input":"is_prime(25)","output":{"0":{"data":{"text/plain":"False"},"exec_count":31,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"5b04b3","input":"for i in range(4):\n    for j in range(4):\n        if j >= i:\n            print(i, j)","output":{"0":{"name":"stdout","output_type":"stream","text":"0 0\n0 1\n0 2\n0 3\n1 1\n1 2\n1 3\n2 2\n2 3\n3 3\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"faecfa","input":"for x in range (1001):\n    for i in range (1001):\n        if x==i**3:\n            print(x)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n8\n27\n64\n125\n216\n343\n512\n729\n"},"1":{"name":"stdout","output_type":"stream","text":"1000\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"ad652b","input":"for i in range(50):\n    if i ** 2 == 2025:\n        print(i)","output":{"0":{"name":"stdout","output_type":"stream","text":"45\n"}},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"154208","input":"Test your answer by running the following cell to define the function $g(x) = x^2$:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"323d71","input":" **Change the code above so that it gives the correct output when `n` is `1`.**\n\nYou could do this with a conditional before the `for` loop, for example.\n\nEven once you've done this there are still problems.  In the next cell, try `is_prime(4)` and `is_prime(25)`:","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"339b63","input":"Notice that on line 3 we need *two* levels of indentation - 8 spaces - because we are inside a conditional inside a for loop.  What would have happened if I forgot the second level of indentation on line 3, so that `print(i)` started in the same place as `if...`?   Change the cell above and find out.\n\nFor loops don't have to use range commands - you can use a list to specify the values the index variable will take:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"53648f","input":"For loops in Python let us run the same code repeatedly for a range of values of some index variable.  The Python code\n\n```\nfor x in range(a, b):\n    <code to be executed for x=a, a+1, ..., b-1>\n```\nwill run the indented code following the line beginning `for x in range(a, b)` first with `x` equal to `a`, then `a+1`, and so on up to `b-1`.  This indented code is called the **body** of the for loop.\n\nHere is another example for loop. Before you run it, think what it will do.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"6c730c","input":"# For loops\n\nConsider an expression like\n\n$$ \\sum_{i=0}^5 (2i+1).$$\n\nIf you were going to evaluate this by hand you do it by adding the terms one-by-one, keeping a running total.  In other words you'd start with a running total of 0, then add on $2\\times 0 + 1$ to get 1, then add on $2\\times 1 + 1$ to get 4, and so on.\n\nYou could do the same thing in Python with the following code:\n```\nrunning_total = 0\nrunning_total = running_total + 2 * 0 + 1\nrunning_total = running_total + 2 * 1 + 1\nrunning_total = running_total + 2 * 2 + 1\nrunning_total = running_total + 2 * 3 + 1\nrunning_total = running_total + 2 * 4 + 1\nrunning_total = running_total + 2 * 5 + 1\n```\n\n...after which `running_total` will hold the answer we want, which is 36.  But typing out all those lines isn't a good use of your time, especially if you wanted the sum from $i=0$ to $50$ or $500000$ instead.  There should be a more efficient way.\n\nWhat we want to do is to run the code\n```\nrunning_total = running_total + 2 * i + 1\n```\nseveral times, substituting a different value for the **index variable** $i$ each time.  You can do this in Python with a **for loop**. Here's what the syntax looks like:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"8cad9c","input":"### Exercise 3\n\nThe simplest way to check whether a number `n` is prime is to go through all the numbers $2, 3, \\ldots, n-1$ and see if any of them divide `n`. If not, `n` is prime.\n\nIn fact, you only need to check the numbers between 2 and $\\sqrt{n}$.  In the code below we'll use `round(n ** 0.5)` to round $\\sqrt{n}$ to the nearest integer.\n\nThis kind of procedure is exactly what for loops are useful for.  Here is a first attempt at writing a function that uses a for loop to check if a number is prime.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"906f92","input":"## Unassessed exercises\n\n### Exercise 1\n\nThe cell below contains a copy of the code we used to compute $\\sum_{i=0}^5 2i+1$.  \n\nModify the code so that it computes the following:\n - $\\sum_{i=3}^{3000} 2i+1$ (you should get the answer 9005992)\n - $\\sum_{i=0}^{50} \\frac{1}{i!}$.  (To get the factorial function, add the line `import math` at the top of the code cell then use `math.factorial(i)`)\n - $\\prod_{i=0}^{10} (2i+1)$.  (What should the initial value for `running_total` be now?)\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"9cb923","input":"and then running `rectangle_rule(g, 0, 1, 100)`. What should the output be, approximately?","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"a409a6","input":"You still get the wrong answer.  **Fix the code so that it gives the right answer for `4` and `25`.**  \n\nHINT: what would `range(2, round(n ** 0.5))` be if `n` was 4 or 25?  You will need to change this `range` to make the function work properly.","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"a6c161","input":"### Exercise 4\n\nIt's perfectly find to have one for loop inside another - these are called *nested* for loops.  What will the following nested for loops print?","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"d94c07","input":"### Exercise 5\n\nA *perfect cube* is a number of the form $n^3$ for a whole number $n$, so 0, 1, 8, and 27 are perfect cubes but 2, 4, and 6 are not.  **Use a for loop to find all the perfect cubes between 0 and 1000.**","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"f2f9af","input":"Unfortunately there are some problems.  In the next cell, try `is_prime(1)` - you'll get the wrong answer: 1 is not a prime number, but `is_prime(1)` will output `True`. ","pos":16,"type":"cell"}
{"id":0,"time":1614655811120,"type":"user"}
{"last_load":1614702704927,"type":"file"}