{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-d7dffc78-39b4-4a5d-96e1-c86a068f0046.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4bdf56","input":"","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"d9b079","input":"[1, 2] + [3, 4, 5]","output":{"0":{"data":{"text/plain":"[1, 2, 3, 4, 5]"},"exec_count":1,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"21df45","input":"b            # b has changed - it is now in increasing order","output":{"0":{"data":{"text/plain":"[1, 2, 3]"},"exec_count":10,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"2dd218","input":"[x for x in [0, 1, 2, 3, 4, 5, 6, 7] if x % 2 == 1]","output":{"0":{"data":{"text/plain":"[1, 3, 5, 7]"},"exec_count":11,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"56bffa","input":"N = 10# enter a value for N here\n[x for x in range(N) if x % 2 == 1]","output":{"0":{"data":{"text/plain":"[1, 3, 5, 7, 9]"},"exec_count":14,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"6ee268","input":"output = []\nfor x in range(21):\n    if x % 2 == 0:\n        output.append(x ** 2)\nprint(output)","output":{"0":{"name":"stdout","output_type":"stream","text":"[0, 4, 16, 36, 64, 100, 144, 196, 256, 324, 400]\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"ce61f2","input":"[x ** 2 for x in range(21) if x % 2 == 0]","output":{"0":{"data":{"text/plain":"[0, 4, 16, 36, 64, 100, 144, 196, 256, 324, 400]"},"exec_count":16,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"5f043e","input":"[[i, j] for i in range(4) for j in range(4)]","output":{"0":{"data":{"text/plain":"[[0, 0],\n [0, 1],\n [0, 2],\n [0, 3],\n [1, 0],\n [1, 1],\n [1, 2],\n [1, 3],\n [2, 0],\n [2, 1],\n [2, 2],\n [2, 3],\n [3, 0],\n [3, 1],\n [3, 2],\n [3, 3]]"},"exec_count":17,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"8dc1f4","input":"[[i,j] for i in range(4) for j in range(4) if i <= j]","output":{"0":{"data":{"text/plain":"[[0, 0],\n [0, 1],\n [0, 2],\n [0, 3],\n [1, 1],\n [1, 2],\n [1, 3],\n [2, 2],\n [2, 3],\n [3, 3]]"},"exec_count":18,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"6d51c0","input":"a = [1,5,2,4]\nsum(a)","output":{"0":{"data":{"text/plain":"12"},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"a5c5aa","input":"def prepend(x, l):\n    # your code here\n    return x+l","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"03abba","input":"prepend ([1,2],[3,4])","output":{"0":{"data":{"text/plain":"[1, 2, 3, 4]"},"exec_count":23,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"82eecc","input":"def is_prime(x):\n    if x == 1:\n        return False\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"2f67fc","input":"is_prime(1)","output":{"0":{"data":{"text/plain":"False"},"exec_count":25,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"bcffa7","input":"# part 1:\n[x for x in range(1, 11)]","output":{"0":{"data":{"text/plain":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},"exec_count":26,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"87fce7","input":"# part 2:\n[0*x for x in range(1,11)]","output":{"0":{"data":{"text/plain":"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"},"exec_count":28,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"f08b12","input":"# part 3:\n[x for x in range(1,22) if x%2==1]","output":{"0":{"data":{"text/plain":"[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]"},"exec_count":29,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"5a22fd","input":"max(a)","output":{"0":{"data":{"text/plain":"5"},"exec_count":3,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"314925","input":"# part 4:\n[x for x in range(10000, 10050) if x%2==1]","output":{"0":{"data":{"text/plain":"[10001,\n 10003,\n 10005,\n 10007,\n 10009,\n 10011,\n 10013,\n 10015,\n 10017,\n 10019,\n 10021,\n 10023,\n 10025,\n 10027,\n 10029,\n 10031,\n 10033,\n 10035,\n 10037,\n 10039,\n 10041,\n 10043,\n 10045,\n 10047,\n 10049]"},"exec_count":30,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"7affa5","input":"# part 5:\n[x for x in range (1,1000)if is_prime(x)]","output":{"0":{"data":{"text/plain":"[2,\n 3,\n 5,\n 7,\n 11,\n 13,\n 17,\n 19,\n 23,\n 29,\n 31,\n 37,\n 41,\n 43,\n 47,\n 53,\n 59,\n 61,\n 67,\n 71,\n 73,\n 79,\n 83,\n 89,\n 97,\n 101,\n 103,\n 107,\n 109,\n 113,\n 127,\n 131,\n 137,\n 139,\n 149,\n 151,\n 157,\n 163,\n 167,\n 173,\n 179,\n 181,\n 191,\n 193,\n 197,\n 199,\n 211,\n 223,\n 227,\n 229,\n 233,\n 239,\n 241,\n 251,\n 257,\n 263,\n 269,\n 271,\n 277,\n 281,\n 283,\n 293,\n 307,\n 311,\n 313,\n 317,\n 331,\n 337,\n 347,\n 349,\n 353,\n 359,\n 367,\n 373,\n 379,\n 383,\n 389,\n 397,\n 401,\n 409,\n 419,\n 421,\n 431,\n 433,\n 439,\n 443,\n 449,\n 457,\n 461,\n 463,\n 467,\n 479,\n 487,\n 491,\n 499,\n 503,\n 509,\n 521,\n 523,\n 541,\n 547,\n 557,\n 563,\n 569,\n 571,\n 577,\n 587,\n 593,\n 599,\n 601,\n 607,\n 613,\n 617,\n 619,\n 631,\n 641,\n 643,\n 647,\n 653,\n 659,\n 661,\n 673,\n 677,\n 683,\n 691,\n 701,\n 709,\n 719,\n 727,\n 733,\n 739,\n 743,\n 751,\n 757,\n 761,\n 769,\n 773,\n 787,\n 797,\n 809,\n 811,\n 821,\n 823,\n 827,\n 829,\n 839,\n 853,\n 857,\n 859,\n 863,\n 877,\n 881,\n 883,\n 887,\n 907,\n 911,\n 919,\n 929,\n 937,\n 941,\n 947,\n 953,\n 967,\n 971,\n 977,\n 983,\n 991,\n 997]"},"exec_count":32,"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"206b84","input":"# part 6:\n[x for x in range (1,1000)if is_prime(x) and is_prime(x+2)]","output":{"0":{"data":{"text/plain":"[3,\n 5,\n 11,\n 17,\n 29,\n 41,\n 59,\n 71,\n 101,\n 107,\n 137,\n 149,\n 179,\n 191,\n 197,\n 227,\n 239,\n 269,\n 281,\n 311,\n 347,\n 419,\n 431,\n 461,\n 521,\n 569,\n 599,\n 617,\n 641,\n 659,\n 809,\n 821,\n 827,\n 857,\n 881]"},"exec_count":33,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"cf62e6","input":"# part 7:\n[x*0.01 for x in range(100)]","output":{"0":{"data":{"text/plain":"[0.0,\n 0.01,\n 0.02,\n 0.03,\n 0.04,\n 0.05,\n 0.06,\n 0.07,\n 0.08,\n 0.09,\n 0.1,\n 0.11,\n 0.12,\n 0.13,\n 0.14,\n 0.15,\n 0.16,\n 0.17,\n 0.18,\n 0.19,\n 0.2,\n 0.21,\n 0.22,\n 0.23,\n 0.24,\n 0.25,\n 0.26,\n 0.27,\n 0.28,\n 0.29,\n 0.3,\n 0.31,\n 0.32,\n 0.33,\n 0.34,\n 0.35000000000000003,\n 0.36,\n 0.37,\n 0.38,\n 0.39,\n 0.4,\n 0.41000000000000003,\n 0.42,\n 0.43,\n 0.44,\n 0.45,\n 0.46,\n 0.47000000000000003,\n 0.48,\n 0.49,\n 0.5,\n 0.51,\n 0.52,\n 0.53,\n 0.54,\n 0.55,\n 0.56,\n 0.5700000000000001,\n 0.58,\n 0.59,\n 0.6,\n 0.61,\n 0.62,\n 0.63,\n 0.64,\n 0.65,\n 0.66,\n 0.67,\n 0.68,\n 0.6900000000000001,\n 0.7000000000000001,\n 0.71,\n 0.72,\n 0.73,\n 0.74,\n 0.75,\n 0.76,\n 0.77,\n 0.78,\n 0.79,\n 0.8,\n 0.81,\n 0.8200000000000001,\n 0.8300000000000001,\n 0.84,\n 0.85,\n 0.86,\n 0.87,\n 0.88,\n 0.89,\n 0.9,\n 0.91,\n 0.92,\n 0.93,\n 0.9400000000000001,\n 0.9500000000000001,\n 0.96,\n 0.97,\n 0.98,\n 0.99]"},"exec_count":37,"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"1f79ba","input":"type(0.01)","output":{"0":{"data":{"text/plain":"float"},"exec_count":39,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"f18776","input":"min(a)","output":{"0":{"data":{"text/plain":"1"},"exec_count":4,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"1e5621","input":"0.01 == 0.050001-0.040001","output":{"0":{"data":{"text/plain":"False"},"exec_count":42,"output_type":"execute_result"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"4fa5e1","input":"error = 10e-10\nabs(0.01-(0.050001-0.040001)) < error","output":{"0":{"data":{"text/plain":"True"},"exec_count":44,"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"e8eeae","input":"sorted(a)","output":{"0":{"data":{"text/plain":"[1, 2, 4, 5]"},"exec_count":5,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"cfd220","input":"a # it will still be in the same order it was before","output":{"0":{"data":{"text/plain":"[1, 5, 2, 4]"},"exec_count":6,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"7b7f39","input":"sorted(['c', 'b', 'a'])","output":{"0":{"data":{"text/plain":"['a', 'b', 'c']"},"exec_count":7,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"486268","input":"l = [1,2,3]\nl.append(4)\nl","output":{"0":{"data":{"text/plain":"[1, 2, 3, 4]"},"exec_count":8,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"a490ee","input":"b = [3,2,1]\nb.sort()     # this will modify b","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"3b4070","input":"## [List comprehensions](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)\n\nIn mathematics you're already used to notation like\n$$ \\{ x \\in \\{0, 1, 2, 3, 4, 5, 6, 7\\} : x \\text{ is odd} \\} $$\nmeaning \"the set of odd numbers between 0 and 6\", and\n$$ \\{ x^2 : x \\in \\{0, 1, \\ldots, 20\\},  x \\text{ is even} \\} $$\nmeaning \"the set of the squares of all the even numbers between 0 and 20.\"\n\nThese are examples of [*set-builder notation*](https://en.wikipedia.org/wiki/Set-builder_notation) or *set comprehensions*.  The same concept (except for lists, not sets) in Python is called a **list comprehensions**.  You can write them essentially the same way as we do in math - the next cell forms a list containing the same elements as the first set above:","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"4511b1","input":"Let's look at why list comprehensions are a good idea.  Like a lot of Python features, they're not strictly necessary in the sense that we could compute the same thing using other commands, e.g. this code","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"518f79","input":"If your list consists of numbers, you can add them up with `sum(l)` and find the maximum and minimum with `max(l)` and `min(l)`.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"59870a","input":"Unlike `sorted`, the list method called `sort` **does** modify the list it is called on.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"5ba300","input":"...which is both quicker to type and easier to understand.\n\nWe are not restricted to just one index variable (`x` in the examples above) in our list comprehensions.  Suppose you want a list of all the pairs `[i, j]` with $0 \\leq i, j, \\leq 3$","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"5d87f2","input":"## Unassessed exercises\n\n### Exercise 1\n\n\nIf `l` is a list then `l.append(x)` adds the element `x` to the *end* of `l`.  For example, if `l = [1, 2, 3]` then `l.append(4)` is `[1, 2, 3, 4]`.  Write a function `prepend(x, l)` which adds the element `x` to the *start* of the list `l`.  For example, `prepend(0, [1, 2, 3])` should return `[0, 1, 2, 3]`.\n\nIt may be helpful to use the concatenation operator `+`.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"8163f0","input":"If your list consists of things which have a natural order, like numbers or strings, you can use `sorted(l)` to produce a new list which contains the same elements as the old one except in increasing order. Note that calling `sorted(l)` does not modify `l`.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"8f83f9","input":"### [List methods](https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range)\n\nThere are many list methods - you can see them all at the link above. Here are the two most important.\n\n`append` takes a single argument and adds it to the end of the list.  It modifies the list that you apply it to.","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"90c730","input":"### Exercise 2\n\nWrite list comprehensions to produce the following lists:\n\n1. `[1, 2, ..., 10]`\n0. `[0, 0, ..., 0]` (ten `0`s).\n0. The odd numbers between 1 and 21 (inclusive)\n0. The odd numbers between 10000 and 10050\n0. All prime numbers less than 1000. (You can use the `is_prime` function from the next cell).\n1. All prime numbers `p` less than 1000 such that `p + 2` is also prime. (If `p` and `p + 2` are prime then they are called [twin primes](https://en.wikipedia.org/wiki/Twin_prime)).\n2. `[0, 0.01, 0.02, 0.03, ..., 0.97, 0.98, 0.99]`","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"c25ce0","input":"# List methods and list comprehensions\n\nJust as for strings, you can join two lists together (**concatenate** them) with `+`:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"e4ee43","input":"Adding conditions is just as easy. If we only want the pairs with $i \\leq j$:","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"f03f57","input":"Of course, you've seen an easier way to generate the whole numbers between 0 and 7: the [`range`](https://docs.python.org/3/library/stdtypes.html#ranges) function.  Recall that `range(b)` generates the numbers $$0, 1, \\ldots, b-1$$ and `range(a, b)` produces the numbers\n$$ a, a+1, a+2, \\ldots, b-2, b-1.$$\n\nWhat should `N` be so that the next cell generates the same output as the one above?  Fill it in and check.","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"fd2bd0","input":"compute a list of the squares of all the even numbers between 0 and 20. We could do that in a single line with a list comprehension:","pos":21,"type":"cell"}
{"id":0,"time":1611789930132,"type":"user"}
{"last_load":1611789932356,"type":"file"}