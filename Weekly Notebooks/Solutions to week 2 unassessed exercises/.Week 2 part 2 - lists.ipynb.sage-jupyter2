{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-e93f05ea-80a0-4f4c-9cb5-d9d4f20efd0e.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1612046624187,"exec_count":1,"id":"08e29e","input":"l = [1, [2, 3, [4, 5]], 6, \"hello\"]\nl[1]","kernel":"python3","output":{"0":{"data":{"text/plain":"[2, 3, [4, 5]]"},"exec_count":1}},"pos":28,"start":1612046624179,"state":"done","type":"cell"}
{"cell_type":"code","end":1612046686026,"exec_count":7,"id":"c6e851","input":"l[2]","kernel":"python3","output":{"0":{"data":{"text/plain":"6"},"exec_count":7}},"pos":30,"start":1612046686019,"state":"done","type":"cell"}
{"cell_type":"code","end":1612046692197,"exec_count":8,"id":"a58a2e","input":"l[1][1]","kernel":"python3","output":{"0":{"data":{"text/plain":"3"},"exec_count":8}},"pos":31,"start":1612046692193,"state":"done","type":"cell"}
{"cell_type":"code","end":1612046700070,"exec_count":9,"id":"e2e068","input":"l[1][2][0]","kernel":"python3","output":{"0":{"data":{"text/plain":"4"},"exec_count":9}},"pos":32,"start":1612046700056,"state":"done","type":"cell"}
{"cell_type":"code","end":1612046714116,"exec_count":10,"id":"869d5b","input":"l[3][4]","kernel":"python3","output":{"0":{"data":{"text/plain":"'o'"},"exec_count":10}},"pos":33,"start":1612046714105,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"02ec76","input":"mix[2][0]","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"061394","input":"myList = [5, 4, 3, 2, 1]","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"185120","input":"len(myList)","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2611ca","input":"myList[5]","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2942ca","input":"l = [6, 5, 4, 3, 2, 1]\nl[1:4] # the list consisting of the elements of l in positions 1, 2, 3","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"55d465","input":"len(mix)","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5d688e","input":"l = [1, 2, 3]\nl[2] = 99\nl","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8b44aa","input":"len(emptyList)","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a0a427","input":"mix = [1, 2.0, \"three\", [1, 2, 3, 4], False]","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a79087","input":"myList[0] # recall that myList is [5, 4, 3, 2, 1]","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b25ab1","input":"len(l[1:1+3])","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b36157","input":"emptyList = []","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c542a7","input":"type(myList)","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cac822","input":"myList[-1]","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e7377d","input":"myList[1]","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f4c872","input":"l = [6, 5, 4, 3, 2, 1]\nprint(l[3:]) # all the elements from position 3 to the end of l\nprint(l[:3]) # all the elements from the start of l to position 2","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"198aa2","input":"# [Lists](https://docs.python.org/3/library/stdtypes.html#lists)\n\nLists let us represent an ordered sequence of data. We enter lists by using square brackets and commas:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"24d12c","input":"## Unassessed exercises\n\n### Exercise 1\n\n\nLet\n```\nl = [1, [2, 3, [4, 5]], 6, \"hello\"]\n```\n\nWhat will be the results of the following Python commands?\n\n1. `l[1]`\n0. `len(l)`\n1. `l[1][0]`\n2. `l[4]`\n3. `l[2:4]`\n4. `l[1][1:2]`\n\nCheck your answers in the cell below.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"25e7f3","input":"## Accessing list elements\n\nOnce you've created a list, you might want to get back the elements of that list.  You can get the `i`th element of a list `l` using the syntax `l[i]`, but there's a catch: **Python lists start at position zero**, just like strings do.  So `myList[0]` will be `5` and `myList[1]` will be `4`","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"42687e","input":"What will `mix[2][0]` be? Remember that mix` is [1, 2.0, \"three\", [1, 2, 3, 4], False]","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"488efd","input":"You might think that the fact that `l[a:b]` gives you the elements in positions `a` up to `b-1`, not `b`, is annoying, but it does at least have one benefit: the length of `l[a:b]` is `b - a`. This means that `l[a:a+k]` always has length `k`.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"4d8447","input":"List elements can be of mixed types - you can even have lists as list elements.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"5ac9d6","input":"There's a special way to get the last element of a list: ask for the element with index -1.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"8571c5","input":"If you want all elements from positions 0 to `b - 1`, you can  use `l[:b]` instead of `l[0:b]`. Similarly if you want all the elements from position `b` up to the end of `l`, you can use `l[b:]` instead of `l[b:len(l)]`.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"90ae97","input":"Let's call an expression like `l[1]` or `l[0][2]`, which returns an element of `l` or an element of an element of `l` and so on, a **list access** to `l`.  What list accesses to `l` would produce the following output?\n\n- `6`\n- `3`\n- `4`\n- `'o'`","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"cb35ab","input":"Like for strings, `len` tells you the length of a list.  What do you think `len(mix)` will be?","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"ccf474","input":"## Slices\n\nThere's a generalization of the `l[i]` notation called a **slice** which is used for getting all elements of a list between two indices.  This is written with a colon: `l[a:b]` is the list `[l[a], l[a+1], ..., l[b-2], l[b-1]`.\n\nNotice that `l[a:b]` gives you the elements of `l` whose indices are `a, a+1, ..., b-2, b-1` just like `range(a,b)` gives you the numbers `a, a+1, ..., b-2, b-1.`.\n\nHere's an example:","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"d880d7","input":"**Change the two numbers in the cell above** (but nothing else except the two numbers) **so that the output is `4`**.\n\nYou can change what's in the `i`th place of a list `l` by assigning to `l[i]`.  (Because lists can be changed after they've been created, they're called *mutable*).","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"f7f0e6","input":"The valid positions of elements in `myList` are 0, 1, 2, 3, and 4.  If you try `myList[5]` you will get an error.","pos":13,"type":"cell"}
{"end":1612046631012,"exec_count":2,"id":"a4ca33","input":"len(l)","kernel":"python3","output":{"0":{"data":{"text/plain":"4"},"exec_count":2}},"pos":28.5,"start":1612046631003,"state":"done","type":"cell"}
{"end":1612046636143,"exec_count":3,"id":"c8d85b","input":"l[1][0]","kernel":"python3","output":{"0":{"data":{"text/plain":"2"},"exec_count":3}},"pos":28.75,"start":1612046636137,"state":"done","type":"cell"}
{"end":1612046670875,"exec_count":5,"id":"61ad3d","input":"l[2:4]","kernel":"python3","output":{"0":{"data":{"text/plain":"[6, 'hello']"},"exec_count":5}},"pos":28.9375,"start":1612046670868,"state":"done","type":"cell"}
{"end":1612046676617,"exec_count":6,"id":"e1d189","input":"l[1][1:2]","kernel":"python3","output":{"0":{"data":{"text/plain":"[3]"},"exec_count":6}},"pos":28.96875,"start":1612046676612,"state":"done","type":"cell"}
{"exec_count":4,"id":"b92726","input":"l[4] # this causes an error: l has length 4, so the entries have numbers 0, 1, 2, 3","kernel":"python3","output":{"0":{"ename":"IndexError","evalue":"list index out of range","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-32713d2680e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ml\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}},"pos":28.875,"state":"done","type":"cell"}
{"id":0,"time":1612046601512,"type":"user"}
{"last_load":1612046601804,"type":"file"}