{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-088457c3-90cd-4705-864a-4f99e7ea2e1c.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"code","end":1611152615250,"exec_count":1,"id":"1c6084","input":"x = 1\ny = 2\nz = 1","kernel":"python3","pos":1,"start":1611152615232,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152615270,"exec_count":2,"id":"2ea476","input":"x < y # is x less than y?","kernel":"python3","output":{"0":{"data":{"text/plain":"True"},"exec_count":2}},"pos":2,"start":1611152615260,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152617384,"exec_count":3,"id":"2f8471","input":"x < -1/2 # is x less than -1/2?","kernel":"python3","output":{"0":{"data":{"text/plain":"False"},"exec_count":3}},"pos":3,"start":1611152617373,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152622127,"exec_count":4,"id":"042d04","input":"x <= z # is x less than or equal to z?","kernel":"python3","output":{"0":{"data":{"text/plain":"True"},"exec_count":4}},"pos":4,"start":1611152622122,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152627488,"exec_count":5,"id":"4b2cdc","input":"x != y # is x not equal to y?","kernel":"python3","output":{"0":{"data":{"text/plain":"True"},"exec_count":5}},"pos":5,"start":1611152627482,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152644138,"exec_count":6,"id":"33661d","input":"x == z","kernel":"python3","output":{"0":{"data":{"text/plain":"True"},"exec_count":6}},"pos":7,"start":1611152644131,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152645514,"exec_count":7,"id":"6b6aca","input":"y = z","kernel":"python3","pos":8,"start":1611152645506,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152648088,"exec_count":8,"id":"1c21f3","input":"x == y","kernel":"python3","output":{"0":{"data":{"text/plain":"True"},"exec_count":8}},"pos":9,"start":1611152648082,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152656795,"exec_count":9,"id":"5dacba","input":"a = True\nb = False\na and b","kernel":"python3","output":{"0":{"data":{"text/plain":"False"},"exec_count":9}},"pos":11,"start":1611152656790,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152664534,"exec_count":10,"id":"aa22ae","input":"A = True\nB = False\nC = True\nD = False\nA or (B and C)","kernel":"python3","output":{"0":{"data":{"text/plain":"True"},"exec_count":10}},"pos":13,"start":1611152664527,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152671416,"exec_count":11,"id":"532efa","input":"(A and B) or (C and (not D))","kernel":"python3","output":{"0":{"data":{"text/plain":"True"},"exec_count":11}},"pos":14,"start":1611152671409,"state":"done","type":"cell"}
{"cell_type":"code","end":1611152672697,"exec_count":12,"id":"6556dd","input":"not ((not A) or (not B))","kernel":"python3","output":{"0":{"data":{"text/plain":"False"},"exec_count":12}},"pos":15,"start":1611152672689,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"161373","input":"**Warning**: don't get `==` mixed up with `=`\n\n```\nx = y\n```\n\nis an *assignment*: it means \"create (or redefine) a variable `x` and give it the value of the variable `y`.\"\n\n```\nx == y\n```\n\nis a *test of equality*: it returns `True` if the variable `x` equals the variable `y` and `False` otherwise.\n\n**What will be the result of the following three cells if they are run in order?**  Think about the meaning of `=` and `==`, and run the cells to see if you were right.  The variables `x, y, z` were defined above as `x = 1`, `y = 2`, and `z=1`.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"175bda","input":"The usual logical operations: `not`, `and`, `or`, [`xor`](https://en.wikipedia.org/wiki/Exclusive_or) (exclusive or) exist in Python. For example,","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"a7844f","input":"# [Booleans](https://docs.python.org/3/library/stdtypes.html#boolean-values)\n\nA boolean variable (`bool` for short) is one whose value is either `True` or `False`.  We briefly saw boolean values before, when we checked if two things were equal using `0 == 1`.\n\nLots of built-in Python operations return a boolean result.  The most frequently used are the comparison operators \n- `<` (less than)\n- `>` (greater than)\n- `<=` (less than or equal to)\n- `>=` (greater than or equal to)\n- `==` (equal to)\n- `!=` (not equal to).","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"eadd5b","input":"...gives `False`, because `a and b` is `True and False` which is `False`.\n\n**What will be the output of the next three cells?**","pos":12,"type":"cell"}
{"id":"5f54ed","input":"","pos":16,"type":"cell"}
{"id":0,"time":1614969354650,"type":"user"}
{"last_load":1611150507227,"type":"file"}