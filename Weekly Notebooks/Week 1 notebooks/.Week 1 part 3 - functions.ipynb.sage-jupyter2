{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-3a1b140a-ea1f-467e-a77d-00580f821fae.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"ac12b5","input":"","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"affac9","input":"def volume_of_cuboid(length, width, height):\n    ?????","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"0b2131","input":"def square(x):\n    return x ** 2","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"655ffe","input":"def depressed_cubic(p, q, x):\n    return x**3+p*x+q","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"4b3136","input":"approximate_derivative(square, 1, 0.0001)","output":{"0":{"ename":"NameError","evalue":"name 'square' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-8d18d70ba718>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mapproximate_derivative\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msquare\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0001\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'square' is not defined"]}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"3555cf","input":"def approximate_derivative(f, x, h):\n    return (f(x+h)-f(x))/h","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"85df14","input":"square(2)","output":{"0":{"data":{"text/plain":"4"},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"df147a","input":"def surface_area_of_cuboid(length, width, height):\n    first_area = length * width\n    second_area = length * height\n    third_area = height * width\n    return 2 * (first_area + second_area + third_area)\n","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"422a7f","input":"surface_area_of_cuboid(2, 3, 4)","output":{"0":{"data":{"text/plain":"52"},"exec_count":5,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"5c92db","input":"def volume_of_sphere(r):\n    pi = 3.141592653\n    return 4/3*pi*r**2","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"2b4143","input":"volume__of_sphere(2)","output":{"0":{"data":{"text/plain":"16.755160816"},"exec_count":7,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"8713b4","input":"a = 1 # Python will ignore this \"comment\"\n2 + 2 # Hopefully the answer is four","output":{"0":{"data":{"text/plain":"4"},"exec_count":8,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"c4dc61","input":"def fibonacci(n):\n    \"\"\"\n    Input: a positive whole number n\n    Output: the nth Fibonacci number\n    \"\"\"\n    phi = (1 + 5 ** 0.5) / 2  # phi is the golden ratio\n    #print(\"We're going to calculate Fibonacci number\", n)\n    r = (phi ** n) / (5 ** 0.5)\n    return round(r)  # round(r) is r rounded to a whole number\n\n# You can use print(x, y, z, ...) to print out the values of x, y, z, ...\nprint(fibonacci(1), fibonacci(2), fibonacci(3), fibonacci(4), fibonacci(5), fibonacci(6), fibonacci(7))","output":{"0":{"name":"stdout","output_type":"stream","text":"1 1 2 3 5 8 13\n"}},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"0cdec6","input":"## Comments\n\nIf Python sees a `#` symbol, it ignores everything on that line after the `#`.  This allows you to add comments to your code explaining what it does, or to temporarily disable a line of code.\n\nThere's another important way to write comments in Python, called a **docstring**.  Docstrings are just text written inside triple quotes: `\"\"\"triple quotes\"\"\"`.  These are ignored by Python but are often used to tell a human reader what the input and output of a function mean.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"0f5abf","input":"When you've made this definition (by executing the cell with shift-enter) you can evaluate (or *call*) the function with the input 2 by typing `square(2)`:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"3723f6","input":"Again, if you get a `NameError` it is because you haven't clicked in the cell where the `square` function was defined and pressed shift-enter to run it.\n\nPython functions are similar to functions in maths: they have (zero or more) inputs and (zero or more) outputs.  To define your own function\n\n- first you write `def`,\n- then the name of your function,\n- then the inputs to the function in parentheses,\n- then a colon `:`\n\nEverything that is part of the definition of the function has to be **indented** by four spaces. That means there must be four spaces before each line which is part of the function definition.  In a Jupyter notebook, this happens automatically.\n\nFinally, you specify the output of the function using `return`.\n\nIn the next cell we define a function with three inputs:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"397db8","input":"# Functions\n\nWe don't want to type out the same formula over and over again.  Python lets us define functions to avoid this.  Here's how to define the function that sends a number $x$ to $x^2$:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"45b6c9","input":"# Unassessed exercises\n\n**Exercise 1.**  Write a function <code>depressed_cubic(p, q, x)</code> whose output is $x^3 + px + q$.  (Yes, \"depressed cubic\" is the real name.)","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"5c55cd","input":"Now write your own function to compute the volumn of a cuboid:","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"64eb44","input":"**Exercise 2.** If $f$ is a differentiable function and $x$ is a number then for small nonzero $h$,\n\n$$f'(x) \\approx \\frac{f(x+h) - f(x)}{h}. $$\n\nWrite a function `approximate_derivative(f, x, h)` which returns this approximation to the derivative of the function `f` at the point `x`.\n\nTest your answer by calling `approximate_derivative(square, 1, 0.0001)`. (At the top of the notebook we defined `square` to be the function that sends `x` to `x ** 2`).  What should the output be, roughly?","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"a1d0d7","input":"The volume of a sphere of radius $r$ is $\\frac{4}{3} \\pi r^3$.  **Complete the next code cell so that the function `volume_of_sphere` computes the volume of a sphere.**  You'll need to delete the `?????` and replace it with a Python expression that calculates $\\frac{4}{3} \\pi r^3$.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"d4496c","input":"Notice that lines 2-5 are all indented by 4 spaces, because they are all part of the definition of the function `surface_area_of_cuboid`.\n\nUse the next cell to find the surface area of a cuboid with length 2, width 3, and height 4 using the function defined in the cell above.","pos":6,"type":"cell"}
{"id":0,"time":1614969158960,"type":"user"}
{"last_load":1614969158408,"type":"file"}