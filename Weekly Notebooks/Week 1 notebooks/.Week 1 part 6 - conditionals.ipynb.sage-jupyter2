{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-2f57252c-6dcf-4a31-8ccc-79c0d072537c.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"3bd328","input":"","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"498e7e","input":"def implies(p, q):\n    # your code goes here","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"707940","input":"def bigger_than_zero(x):\n    if x > 0:\n        return True\n    else:\n        return False","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"88508f","input":"","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a0af9c","input":"def bigger_than_zero_3(x):\n    return x > 0","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c7cdf4","input":"def is_even(n):\n    # your code goes here","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d72e11","input":"def classification(p):\n    # your code goes here","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ea0ee6","input":"def bigger_than_zero_2(x):\n    if x > 0:\n        return True\n    return False","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ee4b49","input":"","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"b707c3","input":"x = 5\n\nif x > 0:\n    print(\"x is positive\")","output":{"0":{"name":"stdout","output_type":"stream","text":"x is positive\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"0a0ff4","input":"x = -5\n\nif x > 0:\n    print(\"positive\")\nelse:\n    print(\"not positive\")","output":{"0":{"name":"stdout","output_type":"stream","text":"not positive\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"eabaa6","input":"def bigger_than_zero(x):\n    if x > 0:\n        return True   # this line is indented twice as it is inside a conditional inside a function definition\n    else:\n        return False","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"8c675e","input":"bigger_than_zero(-5)","output":{"0":{"data":{"text/plain":"False"},"exec_count":4,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"433042","input":"def pos_neg_zero(x):\n    if x > 0:\n        print(\"positive\")\n    elif x == 0:\n        print(\"zero\")\n    else:\n        print(\"negative\")\n\npos_neg_zero(10)","output":{"0":{"name":"stdout","output_type":"stream","text":"positive\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"2caaa5","input":"if x > 0:\n    print(\"positive\")\nelif x > 10:\n    print(\"bigger than 10\")\nelse:\n    print(\"nonpositive\")","output":{"0":{"name":"stdout","output_type":"stream","text":"nonpositive\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"782b1d","input":"def f(n):\n    if (n == 1) or (n == 2):\n        return 1\n    else:\n        return f(n - 1) + f(n - 2)\n\n\n# Let's check that it works OK: the firs\nprint(f(1), f(2), f(3), f(4), f(5), f(6))","output":{"0":{"name":"stdout","output_type":"stream","text":"1 1 2 3 5 8\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b5c8f6","input":"def mystery_function(x):\n    if x > 0:\n        return x\n    return -x","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"57a0f9","input":"mystery_function(10)","output":{"0":{"data":{"text/plain":"10"},"exec_count":9,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"061333","input":"**Exercise 2.** In the UK, the marks from the courses you take at university are usually combined into a single number `p` between 0 and 100.  [You are then given a *degree classification*](https://www.ucl.ac.uk/students/exams-and-assessments/certificates-results/uk-honours-degree-system-undergraduates) as follows:\n - if $p\\geq 70$ you get a first\n - if $60 \\leq p < 70$ you get a 2:1\n - if $50 \\leq p < 60$ you get a 2:2\n - if $40 \\leq p < 50$ you get a 3rd\n - otherwise you get a fail.\n\n**Write a function `classification(p)` which uses a conditional to print out which degree classification is awarded if you have a score `p`.**","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"24cb90","input":"**Exercise 4.** Write a function `is_even(n)` which returns `True` if `n` is even and `False` if `n` is odd.  Remember that `n % 2` is the remainder on dividing `n` by `2`.\n\nYou can assume the input to the function will be a whole number. Make sure to test your function on several different inputs to see if it works correctly.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"397a77","input":"## Unassessed exercises\n\n**Exercise 1.** Here is a Python function which takes a number `x` as an input:","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"5cf185","input":"Line 4, the one following `elif x > 10:`, can **never** be executed.  If `x` is bigger than 10 then certainly it is bigger than 0, so the first condition `if x > 0:` is true.  Python will print \"positive\" and then continue with whatever comes after the conditional, never even checking whether `x > 10`.","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"65c140","input":"Just like in function definitions, we use indentation by four spaces to show Python what should be executed if the condition is true.  This means that if you use conditionals inside a function definition, you will need *two* levels of indentation.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"859770","input":"The **Tribonacci numbers** $t_n$ are defined by $t_1=t_2=1, t_3=2$, and\n\n$$ t_n = t_{n-1} + t_{n-2} + t_{n-3} $$\n\nfor $n \\geq 4$.  **Write a function `t(n)` which computes the `n`th Tribonacci number.**  You can assume the input `n` will always be a positive whole number.","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"92f793","input":"# Conditionals\n\nIn ordinary mathematical English a *conditional* is a statement like  \"if P is true, ...\".  Here P is something that might be true or false - a boolean.\n\nConditionals also exist in Python and are used all the time to produce programs that behave in different ways according to whether or not some condition is true or false.  Here's an example","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"964f91","input":"**Exercise 6.** A nice feature of functions in Python is that they can refer to themselves in their own definition - this is called *recursion*.  You have probably seen a recursive definition of the Fibonacci numbers: $f_1=f_2=1$ and\n\n$$ f_n = f_{n-1} + f_{n-2} $$\n\nfor $n \\geq 3$.  Here's how to write that definition in Python:","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"9a5e1f","input":"**Exercise 5.** Write the logical `implies` function.  It might help to recall from Algebra 1 that\n\n$$ A \\implies B \\equiv (Â¬ A) \\vee B. $$\n\nAgain, you should always test your code.  There are only 4 possibilities: `implies(True, True)` should be `True`, `implies(True, False)` should be false, and so on, so you can test them all.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"b905a6","input":"The most general Python conditional is as follows:\n\n```python\nif condition1:\n    # code to be executed if condition1 is true\nelif condition2:\n    # code to be executed if condition1 was false but condition2 is true\n...\nelif conditionN:\n    # code to be executed if all the previous conditions were false, but conditionN is true\nelse:\n    # code to be executed if all previous conditions were false\n```\n\nHere each `condition` must be an expression with a boolean value.\n\nThe rule is that **only** the indented code following the **first** condition to be true gets executed. After that, Python continues with whatever comes after the conditional.  No other conditions are even checked.  Consider the following code:","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"d7b207","input":"Python conditionals can have several different conditions.  More conditions can be added using `elif:` which is short for \"else if\".\n\nSuppose we want to do something different if `x` is positive, negative, or zero.  We can add an `elif` to our previous code like this:","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"ec2704","input":"**Exercise 3.** \n\nConsider the following three functions. Are they the same, or could they ever behave differently?  Try experimenting in the blank code cell if you're not sure.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"f5eaea","input":"What will `mystery_function(-1)` equal? What will `mystery_function(10)` equal? Which mathematical function is `mystery_function` computing?","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"fe3781","input":"**Try changing the value of the variable `x` in the cell above to something negative and running it again.**\n\nThe meaning of the code in the cell above is that if the *condition* (`x > 0`) is true, then the indented code after the line beginning with `if` (the *if clause*) will be executed.  If the condition `x > 0` is false, then the if clause will not be executed and instead Python continues execution with whatever code comes after the if clause.\n\nWe can add an *else clause* to be executed if the condition was false.  Run the next code cell a few times and enter different numbers to see what happens.","pos":2,"type":"cell"}
{"id":0,"time":1614969345316,"type":"user"}
{"last_load":1614969344820,"type":"file"}