{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-ab596fec-56ec-45f1-ac74-0ebe7c0f9231.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"a4c0bc","input":"","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"95251e","input":"myTuple = (1, 2, 3)\nanotherTuple = (1, 2)\ninhomogeneousTuple = (\"one\", 2.0, [1,1,1])","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"476cc7","input":"myList = [1, 2, 3]\nmyList[0] = 99\nmyList","output":{"0":{"data":{"text/plain":"[99, 2, 3]"},"exec_count":10,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"34e3ec","input":"myTuple = (1, 2, 3)\nmyTuple[0] = 99","output":{"0":{"ename":"TypeError","evalue":"'tuple' object does not support item assignment","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-2eed584bf6d2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmyTuple\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmyTuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m99\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"]}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"2659f4","input":"d = {} # empty dictionary","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"fcc44a","input":"d[(1,2)] = 3 # add the key (1, 2) with value 3 - this is fine","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"9bd106","input":"d[[1,2]] = 3 # try to add [1, 2] as a key - this is illegal","output":{"0":{"ename":"TypeError","evalue":"unhashable type: 'list'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-56f3b2c577f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0md\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3\u001b[0m \u001b[0;31m# try to add [1, 2] as a key - this is illegal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: unhashable type: 'list'"]}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"473a57","input":"lengthOneTuple = (0.5,)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"85f04d","input":"len(myTuple)","output":{"0":{"data":{"text/plain":"3"},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"7ea534","input":"len(anotherTuple)","output":{"0":{"data":{"text/plain":"2"},"exec_count":4,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"4f2dee","input":"len(lengthOneTuple)","output":{"0":{"data":{"text/plain":"1"},"exec_count":5,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d04181","input":"len(())  # () is the empty tuple!","output":{"0":{"data":{"text/plain":"0"},"exec_count":6,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d50247","input":"myTuple[0]","output":{"0":{"data":{"text/plain":"1"},"exec_count":7,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"1364f1","input":"myTuple[1]","output":{"0":{"data":{"text/plain":"2"},"exec_count":8,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"44fcad","input":"(1, 2) + (3, 4, 5)","output":{"0":{"data":{"text/plain":"(1, 2, 3, 4, 5)"},"exec_count":9,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"0e5e7c","input":"You can access elements of a tuple using square brackets, just like for lists (and just like for lists, they start at position 0)","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"67125e","input":"`+ works on tuples just like it does on lists:","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"a8dcc1","input":"# Week 3 part 2 - tuples\n\nTuples are like lists: they're for storing ordered sequences of data. You define them with round brackets.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"cf7a23","input":"The `len` function works on tuples just like on lists: it tells you how many elements there are.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"d25abc","input":"You can have a tuple of any length, but there's a special notation for tuples of length 1.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"d7f5fc","input":"Tuples cannot be changed once they have been created. This property is called **immutability**.\n\nOne benefit of immutable objects is that they make your code easier to understand and reason about.  For example, what would happen if you did a for loop over a list, and inside the loop body you modified the entries of the list or even deleted some of them?  It is hard to predict!  Never modify the list you are looping over inside the loop.\n\nAnother benefit of immutable objects is that, for technical reasons to do with how Python dictionaries are implemented, the keys in a dictionary cannot be mutable. It's OK to use tuples as a dictionary key (so long as all the entries of the tuple are immutable) but not lists.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"f2ac62","input":"If you try to do the same thing with a tuple, you get an error.","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"ffc15d","input":"It often happens that you want to create sequences and modify them afterwards. In those situations, you must use a list, but whenever you want to create sequence data that will never be changed you should use tuples.","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"ffe7dd","input":"## Immutability\n\nSo far, tuples seem to be exactly the same as lists. There must be some important difference, otherwise tuples wouldn't exist.\n\nThe key difference is this.  When you've created a list, you can change its elements.","pos":14,"type":"cell"}
{"id":0,"time":1612267090460,"type":"user"}
{"last_load":1612309970953,"type":"file"}