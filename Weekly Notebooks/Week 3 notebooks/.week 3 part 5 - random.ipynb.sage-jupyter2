{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-10b2d2ff-4a6c-4505-b2f6-3e21f8567273.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"code","end":1611402770362,"exec_count":8,"id":"6bece6","input":"p = random.uniform(0, 1)\nif p > 0.5:\n    print(\"heads\")\nelse:\n    print(\"tails\")","kernel":"python3","output":{"0":{"name":"stdout","text":"tails\n"}},"pos":7,"start":1611402770356,"state":"done","type":"cell"}
{"cell_type":"code","id":"a4a628","input":"random.uniform(0, 1)","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"18bdf3","input":"`random.choices(l, k=n)` returns a list of `n` elements chosen uniformly at random from `l` *with replacement*. That means you can get the same element multiple times.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"2c18c5","input":"Note that `random.randint(a, b)` includes `b` in its range of possible values, unlike `range(a, b)` for example: try","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"4f4d1d","input":"\"Without replacement\" means that you can't get the same element twice, so `random.sample(l, n)` will give an error if `n` is larger than the size of `l`:","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"7fee5b","input":"## Random choices\n\nThe `random` module provides convenient functions for sampling with and without replacement from Python sequence types.\n\n`random.choice` picks a single element uniformly at random:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"9ae0ab","input":"The `random` library can also other common probability distributions - read the documentation for details. For example, `random.gauss(mu, sigma)` is an observation of a normally distributed random variable with mean `mu` and standard deviation `sigma`","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"9d4165","input":"If you run the cell above a few times you should see the output 2.\n\nIf you want random decimal numbers, use `random.uniform(a, b)` which is a randomly chosen `float` between `a` and `b` - this is a simulation of the uniform distribution on $[a,b]$. ","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"a8203b","input":"### Exercise 2: with and without replacement\n\n- Find the average sum of 1000 randomly chosen lists of 3 elements of `[1, 2, ..., 10]`.\n- Find the average sum of 1000 randomly chosen lists of 3 **distinct** elements of `[1, 2, ..., 10]`.\n\nAre they approximately equal?\n\nRecall that you can find the sum of the numbers in a list `l` with `sum(l)`.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"bc892b","input":"Notice that `random.shuffle` modifies its argument. In the cell above, `l` has been changed to a new list.","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"e8cf76","input":"This is useful if you want to generate events with a specified probability. For example, suppose you want to simulate flipping a fair coin by printing \"heads\" with probability 0.5 and \"tails\" with probability 0.5. The probability that `random.uniform(0, 1)` returns a value larger than 0.5 is 0.5, so you could do","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"edacad","input":"## Random permutations\n\nYou can randomly reorder a list `l` with `random.shuffle`","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"f24b7d","input":"If you want to sample `n` things from a sequence `l` *without* replacement use `random.sample(l, n)`.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"fdaf65","input":"# Week 3 part 5 - the `random` module\n\nAnother module we used before in MATH0011 is `random`, which has functions for working with randomness.  The full documentation for the random module [is at this link](https://docs.python.org/3.8/library/random.html) - in this notebook we will only go through a few of its functions.\n\nThe next command generates an integer chosen uniformly at random from $\\{1, 2, \\ldots, 100\\}$:","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ff02c7","input":"## Unassessed exercises\n\n### Exercise 1: how random is `random`?\n\n- Create a dictionary `count` with keys 1, 2, 3, 4, 5 and values 0, 0, 0, 0, 0.\n- Using `random.randint` and a for loop, generate 1000 random integers between 1 and 5 inclusive.\n- Each time you generate a number `i`, increase `count[i]` by 1.\n\nHow big do you expect each `count[i]` to be after the loop finishes?  See how close the actual numbers are to your prediction.","pos":21,"type":"cell"}
{"end":1611402345895,"exec_count":2,"id":"5c448d","input":"import random\nrandom.randint(1, 100)","kernel":"python3","output":{"0":{"data":{"text/plain":"44"},"exec_count":2}},"pos":1,"start":1611402345888,"state":"done","type":"cell"}
{"end":1611402454645,"exec_count":4,"id":"bce1f2","input":"random.randint(1, 2)","kernel":"python3","output":{"0":{"data":{"text/plain":"1"},"exec_count":4}},"pos":3,"start":1611402454641,"state":"done","type":"cell"}
{"end":1611402928997,"exec_count":9,"id":"4e1aa0","input":"random.gauss(0, 1)","kernel":"python3","output":{"0":{"data":{"text/plain":"-1.4359242881768777"},"exec_count":9}},"pos":9,"start":1611402928991,"state":"done","type":"cell"}
{"end":1611403053944,"exec_count":10,"id":"cbc7a5","input":"random.choice(['a', 'b', 'c'])","kernel":"python3","output":{"0":{"data":{"text/plain":"'c'"},"exec_count":10}},"pos":11,"start":1611403053939,"state":"done","type":"cell"}
{"end":1611403167024,"exec_count":12,"id":"9748b1","input":"random.choices(['a', 'b', 'c'], k=10)","kernel":"python3","output":{"0":{"data":{"text/plain":"['c', 'c', 'b', 'b', 'a', 'a', 'c', 'b', 'a', 'c']"},"exec_count":12}},"pos":13,"start":1611403167018,"state":"done","type":"cell"}
{"end":1611403303960,"exec_count":13,"id":"bcc843","input":"random.sample(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], 3)","kernel":"python3","output":{"0":{"data":{"text/plain":"['d', 'h', 'g']"},"exec_count":13}},"pos":15,"start":1611403303953,"state":"done","type":"cell"}
{"end":1611403373465,"exec_count":14,"id":"414176","input":"random.sample([1, 2, 3], 4)","kernel":"python3","output":{"0":{"ename":"ValueError","evalue":"Sample larger than population or is negative","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-02425c4b55fb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/lib/python3.8/random.py\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, population, k)\u001b[0m\n\u001b[1;32m    361\u001b[0m         \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpopulation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 363\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Sample larger than population or is negative\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    364\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m         \u001b[0msetsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m21\u001b[0m        \u001b[0;31m# size of a small set minus size of an empty list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Sample larger than population or is negative"]}},"pos":17,"start":1611403373456,"state":"done","type":"cell"}
{"end":1611403453145,"exec_count":15,"id":"e2838a","input":"l = [1, 2, 3, 4, 5, 6, 7]\nrandom.shuffle(l)\nl","kernel":"python3","output":{"0":{"data":{"text/plain":"[2, 6, 5, 4, 1, 3, 7]"},"exec_count":15}},"pos":19,"start":1611403453137,"state":"done","type":"cell"}
{"id":"9eb464","input":"","pos":24,"type":"cell"}
{"id":"e3cc38","input":"","pos":22,"type":"cell"}
{"last_load":1611401688281,"type":"file"}