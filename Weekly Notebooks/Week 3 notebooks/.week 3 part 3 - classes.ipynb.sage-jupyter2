{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-5e68a6dc-e2e7-4487-8637-816102f7cb5a.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1612310823720,"exec_count":1,"id":"7354c1","input":"class Complex:\n    def __init__(self, real, imag):\n        self.real_part = real\n        self.imaginary_part = imag\n    def multiply(self, other):\n        new_real_part = self.real_part * other.real_part - self.imaginary_part * other.imaginary_part\n        new_imaginary_part = self.real_part * other.imaginary_part + self.imaginary_part * other.real_part\n        return Complex(new_real_part, new_imaginary_part)","kernel":"python3","pos":5,"start":1612310823711,"state":"done","type":"cell"}
{"cell_type":"code","end":1612310824010,"exec_count":2,"id":"caf48e","input":"z = Complex(0, 1)\nw = Complex(1, 1)\np = z.multiply(w)\nprint(p.real_part, p.imaginary_part)  # should be -1 and 1","kernel":"python3","output":{"0":{"name":"stdout","text":"-1 1\n"}},"pos":7,"start":1612310824001,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"26dc89","input":"class Vector:\n    def __init__(self, entries):\n        self.entries = entries   # entries should be a list","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"da9be7","input":"class Complex:\n    def __init__(self, real, imag):\n        self.real_part = real\n        self.imaginary_part = imag\n\n    def __mul__(self, other):\n        new_real_part = self.real_part * other.real_part - self.imaginary_part * other.imaginary_part\n        new_imaginary_part = self.real_part * other.imaginary_part + self.imaginary_part * other.real_part\n        return Complex(new_real_part, new_imaginary_part)\n\n    def __str__(self):\n        return str(self.real_part) + \" + \" + str(self.imaginary_part) + \"i\"\n\n    def __eq__(self, other):\n        return (self.real_part == other.real_part) and (self.imaginary_part == other.imaginary_part)\n\n    def __add__(self, other):\n        # your code here","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ecb6ac","input":"","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"59e392","input":"class Complex:\n    def __init__(self, real, imag):\n        self.real_part = real\n        self.imaginary_part = imag","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"73e640","input":"z = Complex(0, 1)\nw = Complex(1, 1)\np = z * w\nprint(p)","output":{"0":{"name":"stdout","output_type":"stream","text":"-1 + 1 i\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"edc135","input":"class Complex:\n    def __init__(self, real, imag):\n        self.real_part = real\n        self.imaginary_part = imag\n\n    def __mul__(self, other):\n        new_real_part = self.real_part * other.real_part - self.imaginary_part * other.imaginary_part\n        new_imaginary_part = self.real_part * other.imaginary_part + self.imaginary_part * other.real_part\n        return Complex(new_real_part, new_imaginary_part)\n\n    def __str__(self):\n        return str(self.real_part) + \" + \" + str(self.imaginary_part) + \" i\"","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"4d9f81","input":"z = Complex(0,1)  # real part zero, imaginary part 1\nprint(z.real_part)\nprint(z.imaginary_part)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"e4134a","input":"z = Complex(0, 1)\nzz = Complex(0, 1)\nz == zz","output":{"0":{"data":{"text/plain":"False"},"exec_count":3,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"fe2ac9","input":"class Complex:\n    def __init__(self, real, imag):\n        self.real_part = real\n        self.imaginary_part = imag\n\n    def __mul__(self, other):\n        new_real_part = self.real_part * other.real_part - self.imaginary_part * other.imaginary_part\n        new_imaginary_part = self.real_part * other.imaginary_part + self.imaginary_part * other.real_part\n        return Complex(new_real_part, new_imaginary_part)\n\n    def __str__(self):\n        return str(self.real_part) + \" + \" + str(self.imaginary_part) + \" i\"\n\n    def __eq__(self, other):\n        return (self.real_part == other.real_part) and (self.imaginary_part == other.imaginary_part)","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"71dd31","input":"z = Complex(0, 1)\nzz = Complex(0, 1)\nz == zz","output":{"0":{"data":{"text/plain":"True"},"exec_count":7,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"cbfe4d","input":"class Complex:\n    def __init__(self, real, imag):\n        self.real_part = real\n        self.imaginary_part = imag\n    def __mul__(self, other):\n        new_real_part = self.real_part * other.real_part - self.imaginary_part * other.imaginary_part\n        new_imaginary_part = self.real_part * other.imaginary_part + self.imaginary_part * other.real_part\n        return Complex(new_real_part, new_imaginary_part)","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"635227","input":"z = Complex(0, 1)\nw = Complex(1, 1)\np = z * w\nprint(p.real_part, p.imaginary_part)  # should be -1 and 1","output":{"0":{"name":"stdout","output_type":"stream","text":"-1 1\n"}},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"012fce","input":"### Exercise 2\n\nWrite a class `Vector` to represent vectors of any size, including appropriate definitions of `__add__`, `__sub__` (for subtraction), `__eq__`, and `__str__`. Think about what class methods would be useful in working with vectors (dot products? Scalar multiplication?) and implement them.\n\nI have written `__init__` for you - vectors will be represented as lists of their entries, so you create a `Vector` object representing $\\begin{pmatrix}1\\\\2\\end{pmatrix}$ with `Vector([1, 2])` for example.","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"2213cb","input":"We could work with our new `Complex` class much more easily if we could use the ordinary notation `z * w` to multiply two complex numbers instead of `z.mulitply(w)`. This can be done by defining a class method with the special name `__mul__` instead of our `multiply` method:","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"257fe6","input":"## Unassesssed exercises\n\n### Exercise 1\n\nModify the `Complex` class in the code cell below by writing a method `__add__(self, other)` which returns a new `Complex` object which represents the sum of the complex numbers represented by `self` and `other`.  Your code will look similar to the `multiply` method, but simpler.","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"48637d","input":"Now `==` will behave as expected for `Complex` objects:","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"4e343b","input":"Let's try seeing whether two `Complex` objects are equal or not.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"53cf24","input":"So far our `Complex` class isn't very interesting - it's really no better than just storing the two numbers `x` and `y` in a list or a tuple.  We can improve it by adding *class methods*, which are functions that operate on an object of our class (possibly taking other arguments as well).\n\nIf we multiply $z = x+iy$ and $w = u + iv$ we get $$xu-yv + (xv+yu)i$$ so the result of multiplying `Complex(x, y)` and `Complex(u, v)` should be a new `Complex` object with real part \n```\nz.real_part * w.real_part - z.imaginary_part * w.imaginary_part\n```\nand imaginary part\n```\nz.real_part * w.imaginary_part + z.imaginary_part * w.real_part\n```\nHere's how to implement that:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"66985e","input":"# Week 3 part 3 -  Classes\n\nSo far in 0011 we've met several types of Python object: ints, floats, strings, lists, tuples, and dicts.  We will now see how to create our own types.\n\nThis is done in Python using [*classes*](https://docs.python.org/3/tutorial/classes.html). Making a new class can be useful for two main reasons.\n\nFirst, sometimes the data you want to represent doesn't fit well into one of the types built in to Python. This often happens when your data is complicated or made up of lots of different parts.\n\nSecond, suppose for example you want to write a program that works with vectors.  The obvious thing to do seems to be to use a list to represent your vectors.  This is fine, but not exactly convenient: if `v1 = [1, 2]` and `v2 = [3, 4]` then `v1 + v2` is **not** `[1 + 3, 2 + 4]` as you would want for vectors, so you would have to write your own function `add(vec1, vec2)`.  Creating a `Vector` class would allow us to tell Python how to use the symbol `+` on vectors (and `==`, and `-`, and many other things), making code easier to write and to read.  Giving a new meaning to an operator like `+` when its arguments are `Vectors` is called *overloading*.\n\n## Class example 1: complex numbers\n\nLet's say we want to build a class  in Python to represent complex numbers (actually it already has one, but we will do it anyway as an example).  A complex number is built out of a real part and imaginary part, so it's an example of the kind of composite data that classes are useful for representing.\n\nHere is how you define a new class called `Complex`.  An object of this class will consist of two numbers `real_part` and `imaginary_part`, which are called the *instance variables* for that object.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"75ad9c","input":"What this means is that there is now a new class called `Complex`.  People who want to use it can create *instances* of the class using\n```\nz = Complex(x, y)\n```\n(where `x` and `y` are intended to be numbers).  \n\n`init` is short for initialize.  The `__init__` function, which every class should have, is called every time someone creates a new instance.  Our `__init__` function just sets the *instance variables* `real_part` and `imaginary_part` to `x` and `y` respectively.\n\nThe instance variables can be accessed using dot notation: if `z = Complex(x,y)` then `z.real_part` is `x` and `z.imaginary_part` is `y`.\n \nAs usual we use indentation to show Python what is part of the definition of the `Complex` class, and another layer of indentation to show what is part of the defintion of `__init__`.\n\n`self` refers to the new `Complex` object being created.\n\nHere's an example of creating a new `Complex` object, representing the complex number $i$, and examining its real and imaginary parts:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"b6dcf3","input":"This is not good.  What Python is doing is to check whether `z` and `zz` are literally the same object in the computer memory, and they are not - even though they represent the same complex number. To fix this we must implement a `__eq__(self, other)` class method which returns `True` if self and other represent the same `Complex` object and `False` otherwise.","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"b78022","input":"Class methods differ from ordinary functions in the way they are called: we *define* the function using `multiply(self, other)` but to use it on two objects `z` and `w` we must type `z.multiply(w)` - the dot notation syntax here is like that for instance variables. \n\nThe first argument `self` in the definition `def multiply(self, other)` represents the object `z` whose `multiply` method is being called, so `z.multiply(w)` is effectively `multiply(z, w)`.  There's nothing special about `self` - it's not a Python keyword, and you could replace it with any other legitimate variable name if you wanted.  But don't.\n\nLet's multiply two complex number objects.  We will define `z = Complex(0,1)` so that `z` represents $i$ and `w = Complex(1, 1)` so that `w` represents `1 + i`. Their product is $i(1+i) = -1 + i$, so if our functions are working correctly `z.multiply(w)` should have real part $-1$ and imaginary part $1$.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"cb2996","input":"Test your code by checking whether `Complex(0, 1) + Complex(1, 0) == Complex(1, 1)` in the next cell.","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"f277ea","input":"Our complex numbers are still inconvenient to work with because we keep having to use `print(p.real_part, p.imaginary_part)` to display them.  To make a new class work nicely with the Python `print` function you need to define a class method called `__str__` that returns a string representing the `Complex` object:","pos":11,"type":"cell"}
{"id":0,"time":1612295883133,"type":"user"}
{"last_load":1612309971288,"type":"file"}