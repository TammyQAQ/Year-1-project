{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-60609a5f-9747-44ba-8785-70e81fad9123.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"code","end":1612310944141,"exec_count":20,"id":"5fdc47","input":"class Fraction:\n    def __init__(self, a, b):\n        self.numerator = a\n        self.denominator = b\n\n    def __eq__(self, other):\n        return self.numerator * other.denominator == self.denominator * other.numerator\n\n    def __str__(self):\n        return str(self.numerator) + \" / \" + str(self.denominator)\n\n    def __mul__(self, other):\n        # YOUR CODE HERE\n        c = self.numerator * other.numerator\n        d = other.denominator*self.denominator\n        return Fraction(c,d)","kernel":"python3","metadata":{"deletable":false,"nbgrader":{"checksum":"54da82bdad0239e7280590b40a95228a","grade":false,"grade_id":"5fdc47","locked":false,"schema_version":3,"solution":true,"task":false}},"pos":1,"start":1612310944135,"state":"done","type":"cell"}
{"cell_type":"code","end":1612310945208,"exec_count":21,"id":"59b4bc","input":"# Run these tests to see if your solution has an error\nx = Fraction(1, 2)\ny = Fraction(3, 5)\nprint(x * x) # should be 1 / 4, or any fraction equal to this\nprint(x * y) # should be 3 / 10, or any fraction equal to this\n","kernel":"python3","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":true,"grade_id":"59b4bc","locked":true,"points":1,"schema_version":3,"solution":false,"task":false}},"output":{"0":{"name":"stdout","text":"1 / 4\n3 / 10\n"}},"pos":2,"start":1612310945201,"state":"done","type":"cell"}
{"cell_type":"code","end":1612311013736,"exec_count":22,"id":"45ec41","input":"class Fraction:\n    def __init__(self, a, b):\n        self.numerator = a\n        self.denominator = b\n\n    def __eq__(self, other):\n        return self.numerator * other.denominator == self.denominator * other.numerator\n\n    def __str__(self):\n        return str(self.numerator) + \" / \" + str(self.denominator)\n\n    def __add__(self, other):\n        # YOUR CODE HERE\n        c = (self.numerator * other.denominator) + (self.denominator * other.numerator)\n        d = self.denominator * other.denominator\n        return Fraction(c,d)","kernel":"python3","metadata":{"deletable":false,"nbgrader":{"checksum":"0cbb81fe2ce96a2c3a48ff37f182d0a3","grade":false,"grade_id":"45ec41","locked":false,"schema_version":3,"solution":true,"task":false}},"pos":4,"start":1612311013731,"state":"done","type":"cell"}
{"cell_type":"code","end":1612311014217,"exec_count":23,"id":"793049","input":"# Run these tests to see if your solution has an error\nx = Fraction(1, 2)\ny = Fraction(3, 5)\nprint(x + x) # should be 4 / 4, or any fraction equal to this\nprint(x + y) # should be 11 / 10, or any fraction equal to this\n","kernel":"python3","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":true,"grade_id":"793049","locked":true,"points":1,"schema_version":3,"solution":false,"task":false}},"output":{"0":{"name":"stdout","text":"4 / 4\n11 / 10\n"}},"pos":5,"start":1612311014210,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"324843","input":"## Part 2\n\n**Write the class method** `__add__(self, other)` **which should return a** `Fraction` **representing the sum of** `self` **and** `other` using the formula\n\n$$ \\frac{a}{b} + \\frac c d = \\frac{ad + bc}{bd} $$\n\nFor example, if `self` is `Fraction(1, 2)` and `other` is `Fraction(1, 3)` then `__add__(self, other)` should return a `Fraction` object equal (according to the `__eq__` method) to `Fraction(5, 6)`.\n","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":false,"grade_id":"324843","locked":true,"remove":false,"schema_version":3,"solution":false,"task":false}},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"856a59","input":"# Week 3 assessed exercise\n\nComplete this exercise before 23:59 GMT on Sunday 7th February.\n\n## Part 1\n\nThe cell below contains the definition of a Python `Fraction` class.  An object created with `Fraction(a, b)` represents the fraction $\\frac{a}{b}$.  Read the `__eq__` method carefully: it implements the usual rule that $\\frac{a}{b} = \\frac{c}{d}$ if and only if $ad = bc$.\n\n**Write the class method** `__mul__(self, other)` **which should return a** `Fraction` **representing the product of** `self` **and** `other`.\n\nFor example, if `self` was `Fraction(1, 2)` and other was `Fraction(3, 7)` then the `__mul__` method should return a `Fraction` object equal (according to the `__eq__` method) to `Fraction(3, 14)`.\n\nYou can assume that the numerator and denominator of a `Fraction` are integers and that the denominator is never zero.","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":false,"grade_id":"856a59","locked":true,"schema_version":3,"solution":false,"task":false}},"pos":0,"type":"cell"}
{"id":"4a9841","input":"","pos":6,"type":"cell"}
{"id":0,"time":1612299199985,"type":"user"}
{"last_load":1612299200105,"type":"file"}