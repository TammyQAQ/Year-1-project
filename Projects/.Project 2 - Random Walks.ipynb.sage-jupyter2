{"attachments":{"rw.png":{"type":"sha1","value":"650b9110436094743a3759689f99467c5e7d1976"}},"cell_type":"markdown","id":"6f81ed","input":"# Project 2 - Random Walks\n\n![Picture of the number line. For each i there is an arrow from i to i+1 labelled by p and an arrow from i to i-1 labelled by q.](attachment:rw.png)\n\nSuppose that I start at position 0 on the number line. Every second I either move to the right (with probability $p$) or to the left (with probability $q=1-p$).  How likely is it that I will ever visit position 0 again?  How far from 0 am I, on average, after $n$ seconds?  What if instead of walking on a line, I started at position $(0,0)$ in the plane and each second I moved one step north, south, east, or west randomly?\n\nProbabilistic processes like these are called discrete time [random walks](https://en.wikipedia.org/wiki/Random_walk).  They are heavily studied both for theoretical interest and for their applications in many real-world situations.  In this project you will study one and two-dimensional random walks, plot their trajectories, and investigate mean distances from the origin.\n\nThe next cell imports some useful modules and configures `matplotlib` for use in a Jupyter notebook.","pos":1,"type":"cell"}
{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"79d489","input":"","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"af5220","input":"# plot the p=0.7 random walk in this cell","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c26315","input":"","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e27ede","input":"# plot the p=0.5 random walk in this cell","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e53f60","input":"","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e84281","input":"","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f37fb9","input":"","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"cafedc","input":"import math\nimport matplotlib.pyplot as plt\nimport scipy.stats\nimport random\nimport numpy as np","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"54decb","input":"def random_walk(m, p):\n    # your code goes here","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"17a4b8","input":"## Exercise 2\n\nIn this exercise you will estimate the probability that $x_i = 0$ for some $i>0$ in the random walk described in Exercise 1.  That is, you are estimating the probability the random walk ever revisits 0.\n\nWrite a program to generate 1000 different random walks with `m=2000` and outputs how many of those 1000 random walks ever revisit 0, divided by 1000 - this is an estimate of the probability of revisiting 0.  Do this for `p=0.5, p=0.6`, and `p=0.4`. You might find it helpful to re-use or modify the function you wrote in Exercise 1","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"2e6815","input":"## Exercise 1\n\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"461cd7","input":"Consider a sequence $x_0, \\ldots, x_m$ where $x_0= 0$ and \n\n$$x_{i+1} = \\begin{cases} x_i + 1 & \\text{with probability } p\\\\\nx_i - 1 & \\text{with probability } 1-p \\end{cases}$$\n\n**Write a function `random_walk(m, p)` which returns a list of values `[x0, x1, x2, ..., xm]` generated in this way.**\n\nTo generate an event with probability $p$ you could use [`scipy.stats.bernoulli`](https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.bernoulli.html), or [`numpy.random.binomial`](https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.random.binomial.html) with `n = 1`, or [`random.random()`](https://docs.python.org/3.7/library/random.html#random.random) which produces a uniformly distributed random number in $[0,1)$, so the probability it is less than $p$ is $p$.\n\n**Use `plt.plot` to plot the points $(i, x_i)$ for $0 \\leq i \\leq 1000$ where the $x_i$ are generated by `random_walk(1000, p)` for `p=0.5` and `p=0.7`** (on separate axes).","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"8afca2","input":"**Double click here and enter the student numbers for all minigroup members. Don't enter any names.**\n1. **First student number**\n2. **Second student number**\n3. **Third student number.**\n\nBefore you start work on the project, **[click on this link to read the MATH0011 project instructions.](https://www.ucl.ac.uk/~ucahmto/0011/projectinstructions.html)**","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"bfa25d","input":"## Exercise 4\n\nGenerate 500 two-dimensional random walks of 1000 steps as in Exercise 3.\n\nWork out the average distance that these walks are from the origin after $i$ steps for $0 \\leq i \\leq 1000$.  **Plot the average distance after $i$ steps against $i$.  Find (by trial and error) a number $C$ such that the average distance is close to $C \\sqrt{i}$, and plot $y=C\\sqrt{x}$ on the same axes as your average distance plot.**\n\nTo make it clear what you're being asked here: suppose you had only two random walks each of 3 steps, and the coordinates of the points in the walks were\n```\n[(0, 0), (x1, y1), (x2, y2), (x3, y3)]\n[(0, 0), (a1, b1), (a2, b2), (a3, b3)]\n```\nYou can then use Pythagoras' theorem to work out the distances to the origin of each point in the walk - for example the distance from `(x1, y1)` to `(0, 0)` is `(x1 **2 + y1 **2) ** 0.5`.  Let's say the distances to the origin are\n\n```\n0, d1, d2, d3\n```\nin the first walk, and \n```\n0, e1, e2, e3\n```\nin the second. Then the average distances to the origin, which is what you're asked to compute, are\n```\n0, (d1+e1)/2, (d2+e2)/2, (d3+e3)/2.\n```\nand you are asked to plot the points with coordinates `(0, 0), (1, (d1+e1)/2), (2, (d2+e2)/2), (3, (d3+e3)/2)` using `plt.plot`.\n\nIt may simplify your code if you record the distances from the origin in each of your 500 walks using an `np.array` rather than a Python list.  That way you can keep a cumulative sum of the distances with `cumulative_distances = cumulative_distances + current_walk_distances` inside a for loop generating the walks, and the average distances will then equal `cumulative_distances / 500`.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"c0e5f0","input":"# Submitting your project\n\nHave you done all of the following things?\n\n0. Included **all** minigroup members' student numbers at the top of this notebook.\n1. Read through every exercise to check you have answered every part.\n1. Carefully read and followed all of the [MATH0011 project instructions](https://www.ucl.ac.uk/~ucahmto/0011/projectinstructions.html).\n2. Checked that all of the code in this notebook works correctly.\n\nIf you have, you're ready to submit.  One minigroup member only should download the completed notebook (in CoCalc, click the File menu next to the green Save button, then click Download) and submit it on the MATH0011 Moodle.  Please submit **only one file per minigroup.**","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"f8d3d6","input":"## Exercise 3\n\nNow you are going to generate a random walk in two dimensions.  This will start at $(0,0)$ and at every step move north, south, east, or west each with probability $1/4$.  In other words you will generate a sequence $(x_i, y_i)$ such that $(x_0, y_0)=(0,0)$ and\n\n$$ (x_{i+1}, y_{i+1}) = \\begin{cases}\n(x_i, y_i) + (0, 1) & \\text{with probability } 1/4 \\\\\n(x_i, y_i) + (0, -1) & \\text{with probability } 1/4 \\\\\n(x_i, y_i) + (1, 0) & \\text{with probability } 1/4 \\\\\n(x_i, y_i) + (-1, 0) & \\text{with probability } 1/4. \\end{cases}\n$$\n\nGenerate a 1000-step 2d random walk and plot the points $(x_i, y_i)$, connecting each $(x_i,y_i)$ to $(x_{i+1}, y_{i+1})$ with a straight line.  You could use `plt.plot` for this, or the [turtle module](https://docs.python.org/3.3/library/turtle.html?highlight=turtle).","pos":12,"type":"cell"}
{"id":0,"time":1613542167744,"type":"user"}
{"last_load":1613410640874,"type":"file"}